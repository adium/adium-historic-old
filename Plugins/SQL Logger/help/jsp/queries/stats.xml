<?xml version="1.0" encoding="UTF-8"?>
<!-- $Rev: 922 $ $Date: 2004-11-20 10:49:05 -0600 (Sat, 20 Nov 2004) $ -->
<?xml-stylesheet href="querylib.xsl" type="text/xml"?>

<l:library xmlns:l="http://www.slamb.org/axamol/sql-library/library"
           xmlns:s="http://www.slamb.org/axamol/sql-library/statement"
           xmlns:d="http://www.slamb.org/documentation"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.slamb.org/axamol/sql-library/library
                               http://www.slamb.org/projects/axamol/sql-library/schema/library.xsd">

  <l:version>
    $Rev: 922 $ $Date: 2004-11-20 10:49:05 -0600 (Sat, 20 Nov 2004) $
  </l:version>

  <l:description>
    Queries for the Statistics portion of the SQL Logger.
  </l:description>


  <s:query name="yearly_monthly_totals_sender">
    <l:description>
      Gets total messages sent and received for each year and month
      for a user.
    </l:description>

    <s:param name = "sender" type="integer" />

    <s:sql databases="pgsql">
      select    date_part('month', message_date) as month,
                date_part('year', message_date) as year,
                count(*) as count,
                to_char(date_trunc('month', message_date), 'Mon, YYYY')
                  as date,
                date_trunc('month', message_date) as full_date,
                case when sender_id = <s:bind param="sender" />
                  then 1
                  else 0 end as is_sender
      from      messages
      where     sender_id = <s:bind param="sender" />
        or      recipient_id = <s:bind param="sender" />
      group by  date_part('month', message_date),
                to_char(date_trunc('month', message_date), 'Mon, YYYY'),
                date_trunc('month', message_date),
                date_part('year', message_date),
                sender_id = <s:bind param="sender" />
                order by  full_date
    </s:sql>
  </s:query>

  <s:query name="yearly_monthly_totals_meta">
    <l:description>
      Gets the monthly and yearly totals for a meta contact.
    </l:description>

    <s:param name="meta_id" type="integer" />

    <s:sql databases="pgsql">
      select    date_part('month', message_date) as month,
                date_part('year', message_date) as year,
                to_char(date_trunc('month', message_date), 'Mon, YYYY')
                  as date,
                date_trunc('month', message_date) as full_date,
                count(*) as count,
                case when sender_id = user_id then 1 else 0 end as is_sender
      from      im.messages,
                im.meta_contact
      where     (sender_id = user_id or recipient_id = user_id)
        and     meta_id = <s:bind param="meta_id" />
      group by  date_part('month', message_date),
                to_char(date_trunc('month', message_date), 'Mon, YYYY'),
                date_trunc('month', message_date),
                date_part('year', message_date), sender_id = user_id
      order by  full_date
    </s:sql>
  </s:query>

  <s:query name="popular_messages_sender">
    <l:description>
      Gets the 20 most popular messages involving a user.
    </l:description>

    <s:param name="sender" type="integer" />

    <s:sql databases="pgsql">
      select    message,
                count(*)
      from      im.messages
      where     sender_id = <s:bind param="sender" />
      group by  message
      order by  count(*) desc
      limit     20
    </s:sql>
  </s:query>

  <s:query name="popular_messages_meta">
    <l:description>
      Shows most popular messages for a meta contact.
    </l:description>

    <s:param name="meta_id" type="integer" />

    <s:sql databases="pgsql">
      select    message,
                count(*)
      from      im.messages,
                im.meta_contact
      where     sender_id = user_id
        and     meta_id = <s:bind param="meta_id" />
      group by  message
      order by  count(*) desc
      limit     20
    </s:sql>
  </s:query>

  <s:query name="popular_convo_starters_user">
    <l:description>
      Shows the most popular conversation starters for a user.
    </l:description>

    <s:param name="sender" type="integer" />

    <s:sql databases="pgsql">
      select    sender_sn as sender_sn,
                recipient_sn as recipient_sn,
                message,
                count(*)
      from      simple_message_v smv
      where     not exists (
                select  'x'
                from    messages
                where   sender_id in (smv.sender_id, smv.recipient_id)
                 and    recipient_id in (smv.sender_id, smv.recipient_id)
                 and    message_date &lt; smv.message_date
                 and    message_date >
                          smv.message_date - '10 minutes'::interval)
                 and    (sender_id = <s:bind param="sender" />
                          or recipient_id = <s:bind param="sender" />)
      group by  sender_sn, recipient_sn, message
      order by  count(*) desc
      limit     20
    </s:sql>
  </s:query>

  <s:query name="popular_convo_starters_meta">
    <l:description>
      Shows popular conversation starters with a meta contact.
    </l:description>

    <s:param name="meta_id" type="integer" />

    <s:sql databases="pgsql">
      select    sender_sn as sender_sn,
                recipient_sn as recipient_sn,
                message,
                count(*)
      from      simple_message_v smv,
                im.meta_contact
      where     not exists (
                  select  'x' from messages
                  where   sender_id in (smv.sender_id, smv.recipient_id)
                    and   recipient_id in (smv.sender_id, smv.recipient_id)
                    and   message_date &lt; smv.message_date
                    and   message_date >
                            smv.message_date - '10 minutes'::interval)
        and     (sender_id = user_id  or recipient_id = user_id)
        and     meta_id = <s:bind param="meta_id" />
      group by  sender_sn,
                recipient_sn,
                message
      order by  count(*) desc
      limit     20
    </s:sql>
  </s:query>

  <s:query name="popular_users_sender">
    <l:description>
      Show most popular users.
    </l:description>

    <s:param name="sender" type="integer" />

    <s:sql databases="pgsql">
      select    username,
                sum(num_messages),
                (select     message
                  from      messages
                  where     sender_id = user_id
                  order by  random() limit 1) as message
      from      users,
                user_statistics
      where     user_id = sender_id
      and       (sender_id = <s:bind param="sender" />
                or recipient_id = <s:bind param="sender" />)
      group by  username,
                user_id
      order by  sum desc,
                username
      limit     20
    </s:sql>
  </s:query>

  <s:query name="popular_users_meta">
    <l:description>
      Show most popular users for a meta contact.
    </l:description>

    <s:param name="meta_id" type="integer" />

    <s:sql databases="pgsql">
      select    (select username
                from users
                where user_id = user_statistics.sender_id) as username,
                sum(num_messages),
                (select message
                  from messages
                  where sender_id = user_statistics.sender_id
                  order by random()
                  limit 1) as message
      from      users natural join meta_contact, user_statistics
      where     (user_id = sender_id
                or user_id = recipient_id)
        and     meta_id = <s:bind param="meta_id" />
      group by  username,
                user_id,
                sender_id
      order by  sum desc,
                username
      limit     20
    </s:sql>
  </s:query>

  <!-- DETAILS -->

  <s:query name="date_info">
    <l:description>
      Selects first and last days of month.
    </l:description>

    <s:param name="startDate" type="varchar" />

    <s:sql databases="pgsql">
      select    date_part('day',
                  <s:bind param="startDate" />::timestamp
                  + '1 month'::interval
                  - '1 day'::interval) as last_day,
                <s:bind param="startDate" />::timestamp
                  + '1 month'::interval as end_month,
                to_char(<s:bind param="startDate" />::timestamp,
                  'Mon, YYYY') as month
    </s:sql>
  </s:query>

  <s:query name="distinct_months_user">
    <l:description>
      Selects all months with conversations for a particular sender.
    </l:description>

    <s:param name="user_id" type="integer" />

    <s:sql databases="pgsql">
      select distinct
                to_char(message_date, 'Mon, YYYY') as date,
                date_trunc('month', message_date) as full_date
      from      messages
      where     sender_id = <s:bind param="user_id" />
      order by  full_date
    </s:sql>
  </s:query>

   <s:query name="distinct_months_meta">
    <l:description>
      Selects all months with conversations for a particular meta contact.
    </l:description>

    <s:param name="meta_id" type="integer" />

    <s:sql databases="pgsql">
      select distinct
                to_char(message_date, 'Mon, YYYY') as date,
                date_trunc('month', message_date) as full_date
      from      messages, meta_contact
      where     sender_id = user_id
       and      meta_id = <s:bind param="meta_id" />
      order by  full_date
    </s:sql>
  </s:query>


  <s:query name="total_messages_month_user">
    <l:description>
      Returns total messages sent and received and averages
        for a month for a user.
    </l:description>

    <s:param name="user_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    coalesce(count(*),0) as total_sent,
                coalesce(min(length(message)),0) as min_length,
                coalesce(max(length(message)),0) as max_length,
                coalesce(trunc(avg(length(message)),2),0) as avg_length,
                'Sent' as identifier
      from      im.messages
      where     sender_id = <s:bind param="user_id" />
        and     message_date >= <s:bind param="startDate" />::timestamp
        and     message_date &lt; <s:bind param="endDate" />::timestamp
      group by  sender_id
      union all
      select    coalesce(count(*),0) as total_sent,
                coalesce(min(length(message)),0) as min_length,
                coalesce(max(length(message)),0) as max_length,
                coalesce(trunc(avg(length(message)), 2),0) as avg_length,
                'Received' as identifier
      from      im.messages
      where     recipient_id = <s:bind param="user_id" />
        and     message_date >= <s:bind param="startDate" />::timestamp
        and     message_date &lt; <s:bind param="endDate" />::timestamp
      group by recipient_id
    </s:sql>
  </s:query>

  <s:query name="total_messages_month_meta">
    <l:description>
      Returns total messages and average length for a month for a meta.
    </l:description>

    <s:param name="meta_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    coalesce(count(*),0) as total_sent,
                coalesce(min(length(message)),0) as min_length,
                coalesce(max(length(message)),0) as max_length,
                coalesce(trunc(avg(length(message)),2),0) as avg_length,
                'Sent' as identifier
      from      im.messages,
                im.meta_contact
      where     sender_id = user_id
        and     meta_id = <s:bind param="meta_id" />
        and     message_date >= <s:bind param="startDate" />::timestamp
        and     message_date &lt; <s:bind param="endDate" />::timestamp
      union all
      select    coalesce(count(*),0) as total_sent,
                coalesce(min(length(message)),0) as min_length,
                coalesce(max(length(message)),0) as max_length,
                coalesce(trunc(avg(length(message)), 2),0) as avg_length,
                'Received' as identifier
      from      im.messages,
                im.meta_contact
      where     recipient_id = user_id
        and     meta_id = <s:bind param="meta_id" />
        and     message_date >= <s:bind param="startDate" />::timestamp
        and     message_date &lt; <s:bind param="endDate" />::timestamp
    </s:sql>
  </s:query>

  <s:query name="daily_totals_user">
    <l:description>
      Gets total messages sent/received per day for a user for a month.
    </l:description>

    <s:param name="user_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    date_part('day', message_date) as day,
                count(*) as count
      from      messages
      where     message_date >= <s:bind param="startDate" />::timestamp
       and      message_date &lt;= <s:bind param="endDate" />::timestamp
       and      (sender_id = <s:bind param="user_id" />
                or recipient_id = <s:bind param="user_id" />)
      group by  date_part('day', message_date)
    </s:sql>
  </s:query>

  <s:query name="daily_totals_meta">
    <l:description>
      Shows total messages per day for a meta contact for a range.
    </l:description>

    <s:param name="meta_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    date_part('day', message_date) as day,
                count(*) as count
      from      messages,
                meta_contact
      where     message_date >= <s:bind param="startDate" />::timestamp
       and      message_date &lt;= <s:bind param="endDate" />::timestamp
       and      (sender_id = user_id
                or recipient_id = user_id)
       and      meta_id = <s:bind param="meta_id" />
      group by  date_part('day', message_date)
     </s:sql>
   </s:query>

   <s:query name="popular_messages_user_range">
     <l:description>
       Shows popular messages for a user over the month.
     </l:description>

    <s:param name="user_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    message,
                count(*)
      from      messages
      where     sender_id = <s:bind param="user_id" />
        and     message_date >= <s:bind param="startDate" />
        and     message_date &lt; <s:bind param="endDate" />
      group by  message
      having    count(*) > 1
      order by  count(*) desc limit 20
    </s:sql>
  </s:query>

   <s:query name="popular_messages_meta_range">
     <l:description>
       Shows popular messages for a meta contact over the month.
     </l:description>

    <s:param name="meta_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    message,
                count(*)
      from      messages, meta_contact
      where     sender_id = user_id
        and     meta_id = <s:bind param="meta_id" />
        and     message_date >= <s:bind param="startDate" />
        and     message_date &lt; <s:bind param="endDate" />
      group by  message
      having    count(*) > 1
      order by  count(*) desc limit 20
    </s:sql>
  </s:query>

  <s:query name="popular_convo_starters_user_range">
    <l:description>
      Shows the most popular conversation starters for a user for a range.
    </l:description>

    <s:param name="user_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    sender_sn as sender_sn,
                recipient_sn as recipient_sn,
                message,
                count(*)
      from      simple_message_v smv
      where     not exists (
                select  'x'
                from    messages
                where   sender_id in (smv.sender_id, smv.recipient_id)
                 and    recipient_id in (smv.sender_id, smv.recipient_id)
                 and    message_date &lt; smv.message_date
                 and    message_date >
                          smv.message_date - '10 minutes'::interval)
                 and    (sender_id = <s:bind param="user_id" />
                          or recipient_id = <s:bind param="user_id" />)
        and     message_date >= <s:bind param="startDate" />
        and     message_date &lt; <s:bind param="endDate" />
      group by  sender_sn, recipient_sn, message
      order by  count(*) desc
      limit     20
    </s:sql>
  </s:query>

  <s:query name="popular_convo_starters_meta_range">
    <l:description>
      Shows popular conversation starters with a meta contact for a range.
    </l:description>

    <s:param name="meta_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    sender_sn as sender_sn,
                recipient_sn as recipient_sn,
                message,
                count(*)
      from      im.simple_message_v smv,
                im.meta_contact
      where     not exists (
                  select  'x' from messages
                  where   sender_id in (smv.sender_id, smv.recipient_id)
                    and   recipient_id in (smv.sender_id, smv.recipient_id)
                    and   message_date &lt; smv.message_date
                    and   message_date >
                            smv.message_date - '10 minutes'::interval)
        and     (sender_id = user_id  or recipient_id = user_id)
        and     meta_id = <s:bind param="meta_id" />
        and     message_date >= <s:bind param="startDate" />
        and     message_date &lt; <s:bind param="endDate" />
      group by  sender_sn,
                recipient_sn,
                message
      order by  count(*) desc
      limit     20
    </s:sql>
  </s:query>

  <s:query name="daily_hourly_totals_user_range">
    <l:description>
      Shows total messages for hour and day of a range (month).
    </l:description>

    <s:param name="user_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    date_part('day', message_date) as day,
                date_part('hour', message_date) as hour,
                count(*) as count
      from      im.messages
      where     (sender_id = <s:bind param="user_id" />
                  or recipient_id = <s:bind param="user_id" />)
        and     message_date >= <s:bind param="startDate" />::timestamp
        and     message_date &lt; <s:bind param="endDate" />::timestamp
      group by  date_part('day', message_date),
                date_part('hour', message_date)
    </s:sql>
  </s:query>

  <s:query name="daily_hourly_totals_meta_range">
    <l:description>
      Shows total messages for hour and day of a range (month).
    </l:description>

    <s:param name="meta_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
      select    date_part('day', message_date) as day,
                date_part('hour', message_date) as hour,
                count(*) as count
      from      im.messages,
                im.meta_contact
      where     (sender_id = user_id
                  or recipient_id = user_id)
        and     meta_id = <s:bind param="meta_id" />
        and     message_date >= <s:bind param="startDate" />::timestamp
        and     message_date &lt; <s:bind param="endDate" />::timestamp
      group by  date_part('day', message_date),
                date_part('hour', message_date)
    </s:sql>
  </s:query>

  <s:query name="stats_range_user">
    <l:description>
      Grabs some stats about messages for a date range.
    </l:description>

    <s:param name="user_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
    <!-- Uses select * from (select blah to work around pgsql bug
          dealing with the order by being unable to handle the + -->
      select * from (
        select  username,
                recipient_id as "Recipient",
                count(*) as "Sent",
                (select count(*)
                from    messages
                where   recipient_id = a.sender_id
                  and   sender_id = a.recipient_id
                  and   message_date >= <s:bind param="startDate" />::timestamp
                  and message_date &lt; <s:bind param="endDate" />::timestamp)
                    as  "Received",
                (select message
                from    messages
                where   sender_id = a.recipient_id
                  and   message_date >= <s:bind param="startDate" />::timestamp
                  and   message_date &lt; <s:bind param="endDate" />::timestamp
                order by random() limit 1) as "Random Quote"
        from    messages a,
                users
        where   sender_id = <s:bind param="user_id" />
          and   message_date >= <s:bind param="startDate" />::timestamp
          and   message_date &lt; <s:bind param="endDate" />::timestamp
          and   users.user_id = a.recipient_id
        group by sender_id,
                recipient_id,
                username) as stats
      order by "Sent" + "Received" desc
    </s:sql>
  </s:query>

  <s:query name="stats_range_meta">
    <l:description>
      Grabs some stats about messages for a date range.
    </l:description>

    <s:param name="meta_id" type="integer" />
    <s:param name="startDate" type="varchar" />
    <s:param name="endDate" type="varchar" />

    <s:sql databases="pgsql">
    <!-- Uses select * from (select blah to work around pgsql bug
          dealing with the order by being unable to handle the + -->
      select * from (
        select  username,
                recipient_id as "Recipient",
                count(*) as "Sent",
                (select count(*)
                from    messages
                where   recipient_id = a.sender_id
                  and   sender_id = a.recipient_id
                  and   message_date >= <s:bind param="startDate" />::timestamp
                  and message_date &lt; <s:bind param="endDate" />::timestamp)
                    as  "Received",
                (select message
                from    messages
                where   sender_id = a.recipient_id
                  and   message_date >= <s:bind param="startDate" />::timestamp
                  and   message_date &lt; <s:bind param="endDate" />::timestamp
                order by random() limit 1) as "Random Quote"
        from    messages a,
                users,
                meta_contact
        where   sender_id = meta_contact.user_id
          and   users.user_id = a.recipient_id
          and   meta_id = <s:bind param="meta_id" />
          and   message_date >= <s:bind param="startDate" />::timestamp
          and   message_date &lt; <s:bind param="endDate" />::timestamp
        group by sender_id,
                recipient_id,
                username) as stats
      order by "Sent" + "Received" desc
    </s:sql>
  </s:query>
</l:library>
