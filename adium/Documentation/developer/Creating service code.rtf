{\rtf1\mac\ansicpg10000\uc1 \deff4\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman{\*\falt Times};}{\f2\fnil\fcharset256\fprq2{\*\panose 00020703090202050204}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 00020005000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Helvetica;}{\f14\fnil\fcharset2\fprq2{\*\panose 00050201020108040807}Wingdings;}{\f18\froman\fcharset77\fprq0{\*\panose 00000000000000000000}Times-Bold{\*\falt Times};}{\f19\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Monaco;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman{\*\falt Times};}{\f2\fnil\fcharset256\fprq2{\*\panose 00020703090202050204}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 00020005000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Helvetica;}{\f14\fnil\fcharset2\fprq2{\*\panose 00050201020108040807}Wingdings;}{\f18\froman\fcharset77\fprq0{\*\panose 00000000000000000000}Times-Bold{\*\falt Times};}{\f19\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Monaco;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red118\green15\blue80;}{\stylesheet{\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f4\lang1033\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f18\fs28\lang1033\cgrid \sbasedon0 \snext15 Body Text;}}{\*\listtable{\list\listtemplateid-121993320{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li720\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 _;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 _;}{\levelnumbers;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \loch\af3\dbch\af0\hich\f3 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 _;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 _;}{\levelnumbers;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \loch\af3\dbch\af0\hich\f3 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 _;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }{\listname ;}\listid1869219970}}{\*\listoverridetable{\listoverride\listid1869219970\listoverridecount0\ls1}}{\info{\title Adium Documentation : Creating service code}{\author Adam Iser}{\operator Adam Iser}{\creatim\yr2002\mo12\dy17\hr20\min42}{\revtim\yr2002\mo12\dy20\hr23\min45}{\version62}{\edmins189}{\nofpages8}{\nofwords1908}{\nofchars10878}{\nofcharsws13358}{\vern16561}}\paperw12226\paperh15826\margl1440 \ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1440\dgvorigin1440\dghshow0\dgvshow0\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule \fet0\sectd \linex0\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\b\f5\fs28\cf13 Adium Documentation : Creating service code\par }{\f5\cf13 {\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict\bliptag577262390\blipupi72{\*\blipuid 2268533606c4a90ee9ad42aca81cfdb1}000d00000000001900321101ff00000000000000}}{\f5\fs28\cf13 \par }\pard\plain \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f18\fs28\lang1033\cgrid {\f5\fs24\cf13 \par }{\f5\fs24\cf1 All protocol code requires 2 pieces:\par {\listtext\pard\plain\s15 \f5\cf1 \hich\af5\dbch\af0\loch\f5 -\tab}}\pard \s15\fi-360\li720\nowidctlpar\tx360\jclisttab\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\ls1\rin0\lin720\itap0 {\f5\fs24\cf1 A service controller\par {\listtext\pard\plain\s15 \f5\cf1 \hich\af5\dbch\af0\loch\f5 -\tab}An AIAccount subclass}{\f5\fs24\cf13 \par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf13 \par }{\b\f5\fs24\cf13 The Service Controller\par }{\f5\fs24\cf1 The service controller initiates the connection between Adium and your account code.  It\rquote s responsible for identifying the type of protocol offered, and returning new instances of it\rquote s AIAccount subclass.\par \par Service controllers are implemented as a protocol, which means that any class can serve as a service controller, as long as it conforms to the protocol.  This allows an AIPlugin subclass to also serve as the controller for a service plugin, saving a bit of work.\par \par The service controller protocol consists of the following methods:\par }\pard\plain \nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\f19\fs20\cf1 \par }\pard\plain \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f18\fs28\lang1033\cgrid {\f5\fs24\cf1 - (NSString *)identifier;\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 Returns a string identifier for the service.  This string must be unique to the service code.  \par \par Since the identifier string is never seen by the user, it may be as cryptic as you want.  It is recommended that you use the service\rquote s name, with the specific protocol(if applicable) in parenthesis.  Such as \ldblquote AIM (TOC2)\rdblquote , where the service is AIM, and the specific protocol being used is TOC, version 2.\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \par - (NSString *)description;\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 Returns a string description for the service.  This string is used exclusively to inform the user about the service code, and doesn\rquote t need to be unique.\par \par It is recommended that the service\rquote s full name is used, with the specific protocol (if applicable) in parenthesis.  Such as \ldblquote AOL Instant Messenger (TOC2)\rdblquote .\par \par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 - (AIServiceType *)handleServiceType;}{\f19\fs20\cf1 \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 A service type is used to describe handles.  When a contact is created, users will be able to select the type of contact it is.  This will determine the icon that gets placed next to it, and the characters they're allowed to type as a handle.  Service types have 4 parts:\par \par }{\f5\fs24\cf13 Identifier:\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 The identifier is used to differientate between service types.  It is never seen by the user and may be as cryptic as you want.  It is recommended that you use the services name as the identifier (such as "AIM" or "MSN").\par }{\f5\fs24\cf13 \par }{\f5\fs24\cf1 Multiple service plugins may return service types with the same identifier.  This is correct.  If the handles are compatable, meaning that handles on the two services can communicate with eachother, then both services should give the same service type identifier.\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par }{\f5\fs24\cf13 description:\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 The description is used when creating contacts to show the user the available choices.  It should be a human readable string that lists all the handle service types that are compatable, such as "AIM, AOL, and .Mac"\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par }{\f5\fs24\cf13 image:\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 The image is used when creating contacts, along side the description.  It should be a 16x16(?) image\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf13 caseSensitive & allowedCharacters:\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 Case sensitive should be true if case matters for contact names on this service.  Allowed characters is a characterset containing all the characters allowed in handle names.  Use this to prevent the user from entering invalid contact names.\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f19\fs20\cf1 \par }\pard \s15\li360\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf13 Sample service type:\par }{\f5\fs22\cf1 [AIServiceType serviceTypeWithIdentifier:@"AIM"\par description:@"AIM, AOL, and .Mac"\par image:[AIImageUtilities imageNamed:@"LilYellowDuck" forClass:[self class]] caseSensitive:NO\par allowedCharacters:[NSCharacterSet characterSetWithCharactersInString:@"abcdefghijklmnopqrstuvwxyz0123456789"]];\par }\pard\plain \nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\f19\fs20\cf1 \par \par }\pard \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 {\f5\cf1 - (id)accountWithProperties:(NSDictionary *)inProperties owner:(id)inOwner;\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\fs28\lang1033\cgrid {\f5\fs24\cf1 Should return a new instance of the custom AIAccount subclass (described below) with the specified properties\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \par Because of the nature of protocols, the following methods should be implemented as well:\par - (id)retain\{ return([super retain]); \}\par - (oneway void)release\{ [super release]; \}\par - (id)autorelease \{ return([super autorelease]); \}\par }{\f5\fs20\cf13 \par }{\f5\fs24\cf13 \par }{\b\f5\fs24\cf13 The AIAccount Subclass\par }{\f5\fs24\cf1 Service code requires a custom subclass of AIAccount.  Since little code is common between protocol implementations, the AIAccount class implements very little.  It covers management of the properties dict, and provides class variables for 'owner' (A reference to AIAdium) and 'service' (A reference to the service controller that spawned the account).\par \par Because of the dynamic nature of accounts, their methods are implemented using protocols.  When creating an account you can pick and choose which protocols to implement (with the exception of AIAccount_Required, which must be implemented).  They are:\par \par \par }{\f5\fs24\cf13 Protocol: AIAccount_Required\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 Required methods\par \par - (void)initAccount;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 Called after the account has inited, so the custom code can init.  This is where anything account related should be setup\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par - (id <AIAccountViewController>)accountView;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 This method should return an accountViewController with fields for any required information.  Password information should not be requested.\par \par }\pard \s15\li1080\nowidctlpar\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin1080\itap0 {\f5\fs22\cf1 The account view controller protocol defines 2 methods:\par - (NSView *)view;\par - (void)saveChanges;\par \par View should return an NSView containing fields for any information required for the service to work.  Typically this will just be an account name field, but anything else required should be included.  The view must be 350 pixels wide, but can be any height.\par \par The account view controller is responsible for saving changes made in the view in response to the saveChanges method.  It is also responsible for setting up the view before returning it.\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \tab \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 - (NSString *)accountID;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 Every account has a unique string identifier that distinguishes it from other accounts.  This string shold not only be unique to the service code, but to the indicidual account as well.\par \par It is recommended that this method returns a combination of the service identifier and account login, seperated by a period - such as "AIM.resimada".\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 - (NSString *)accountDescription;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 When an account list is presented to the user, the string returned by this method is used to describe the account instance.  In most situations, simply returning the account login here will be desired.  But if for whatever reason a more descriptive name is required, it can be returned.\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \par }{\f5\fs24\cf13 Protocol: AIAccount_Content\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 Support for sending content to contacts\par \par - (BOOL)sendContentObject:(id <AIContentObject>)object toHandle:(AIContactHandle *)inHandle;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 In response to this method, the account should send the passed content to the specified handle.  For more information on content, check out the content docs.\par }\pard\plain \nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\f19\cf1 \par }\pard\plain \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f18\fs28\lang1033\cgrid {\f5\fs24\cf13 Protocol: AIAccount_Handles\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 Support for standard UID based handles (ungrouped)\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf13 \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 - (BOOL)contactListEditable;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 Since most contact lists will be stored server-side, they will not always be available for editing. Return YES the list is available for editing, and NO if not. For locally stored lists, YES can always be returned.\par \par }\pard \s15\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \tab Returning NO will disable any list editing options in the Adium interface.\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par - (BOOL)addHandle:(AIContactHandle *)handle;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 The account code should add the passed handle to it's server side or local contact list.  The Handle's UID can be retrieved using AIContactHandle's UID method.\par \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 - (BOOL)removeHandle:(AIContactHandle *)handle;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 The account code should remove the passed handle from it's server side or local contact list.  The Handle's UID can be retrieved using AIContactHandle's UID method.\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 - (BOOL)renameHandle:(AIContactHandle *)handle to:(NSString *)inName;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 In response to his method, the passed handle should be renamed to inName.  inName serves as the handles new UID.\par }\pard\plain \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 \f4\lang1033\cgrid {\f19\cf17 \par \par }\pard\plain \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f18\fs28\lang1033\cgrid {\f5\fs24\cf13 protocol: AIAccount_GroupedHandles\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 Support for UID based, grouped handles\par \par - (BOOL)contactListEditable;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 Since most contact lists will be stored server-side, they will not always be available for editing. Return YES if the list is available for editing, and NO if not. For locally stored lists, YES can always be returned.\par \par }\pard \s15\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \tab Returning NO will disable any list editing options in the Adium interface.\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par - (BOOL)addHandle:(AIContactHandle *)handle toGroup:(AIContactGroup *)group;    \par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 The account code should add the passed handle to it's server side or local contact list, into the specified group.  The Handle's UID can be retrieved using AIContactHandle's UID method.  The group name can be retrieved using group's displayName method.\par \par If group is nil, the Handle should be added to the root of the contact list.  If this is not supported, it should be added to a special/custom group.  An example of this would be using a group named 'contact list' to store these 'root' contacts.\par \par Account code shouldn't worry about groups within groups.  Only pay attention to the group passed to this method.  Adium will never allow two groups with the same name, so there won't be any conflicts.\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1     - (BOOL)removeHandle:(AIContactHandle *)handle fromGroup:(AIContactGroup *)group;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 The account code should remove the passed handle from it's server side or local contact list, out of the specified group.  The Handle's UID can be retrieved using AIContactHandle's UID method. The group name can be retrieved using group's displayName method.\par \par If group is nil, the Handle should be removed from the root of the contact list.  If this is not supported, remove the handle from the custom group discussed above.\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 - (BOOL)renameHandle:(AIContactHandle *)handle inGroup:(AIContactGroup *)group to:(NSString *)inName;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 In response to this method the passed handle, in the specified group, should be renamed to inName.  inName serves as the handles new UID.\par \par The same notes apply to group as above (regarding nil and nested groups).\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par - (BOOL)moveHandle:(AIContactHandle *)handle fromGroup:(AIContactGroup *)sourceGroup toGroup:(AIContactGroup *)destGroup;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 The passed handle should be moved from sourceGroup to destGroup.  The same notes apply to group as above (regarding nil and nested groups).\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par     \par - (BOOL)addGroup:(AIContactGroup *)newGroup;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 A group should be added. The group name can be retrieved using newGroup's displayName method.\par }\pard \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5\fs24\cf1 \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 - (BOOL)removeGroup:(AIContactGroup *)group;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 A group should be added. The group name can be retrieved using group's displayName method.\par \par Adium will always instruct the account to empty the group's contents before removing it, so only empty groups will ever be passed to this method.\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par - (BOOL)renameGroup:(AIContactGroup *)group to:(NSString *)inName;\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1 The passed group should be renamed to inName. The group's existing name can be retrieved using group's displayName method.\par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 \par }\pard\plain \nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\f19\cf1 \par }\pard\plain \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f18\fs28\lang1033\cgrid {\f5\fs24\cf13 protocol: AIAccount_Status\par }\pard\plain \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 \f4\lang1033\cgrid {\f5\cf1 Support for the basic status of offline, online, connecting, and disconnecting\par }\pard\plain \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f18\fs28\lang1033\cgrid {\f5\fs24\cf1 \par }\pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {\f5\fs24\cf1 - (ACCOUNT_STATUS)status;\par Should return the current account connection status.  One of:\par STATUS_OFFLINE \endash  The account is offline\par STATUS_CONNECTING \endash  The account is connecting\par STATUS_ONLINE \endash  The account is online\par STATUS_DISCONNECTING \endash  The account is disconnecting\par  \par - (void)connect;\par Do what is necessary to get this account into STATUS_ONLINE\par  \par - (void)disconnect;\par Do what is necessary to get this account into STATUS_OFFLINE\par }\pard \s15\li720\nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\f5\fs24\cf1     \par }\pard\plain \nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\f19\cf1 \par }\pard\plain \s15\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f18\fs28\lang1033\cgrid {\par }{\b\f5\fs24\cf13 Other useful methods for service code}{\par }\pard\plain \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 \f4\lang1033\cgrid {\f5\cf1 The account controller will lend a hand in password usage.  Before attempting to connect, call the method:\par - (void)passwordForAccount:(AIAccount *)inAccount notifyingTarget:(id)inTarget selector:(SEL)inSelector;\par \par When the password becomes available (either from the user's keychain, or as a result of a password prompt), the target and selector will be notified.  The password (an NSString) is passed to the selector.\par \par If nil is passed to the selector, the password is unavailable.  The account code should fail gracefully in this situation, canceling the operation it was attempting. \par \par The account controller handles all the details, including keychain storage and the 'enter password' interface.  However, when an account is done with a specific password, it must be manually removed from the keychain (if desired) using accountController's method:\par \par - (void)forgetPasswordForAccount:(AIAccount *)inAccount;\par \par This method will forget a password if it was on the keychain, and do nothing if the password wasn't on the keychain.\par \par \par }{\b\f5\cf13 Making it work\par }{\f5\cf1 In your plugins installPlugin method, register your service controller using account controller's method:\par - (void)registerService:(id <AIServiceController>)inService;\par This must be called from within an installPlugin method.  This is all that is needed to register your service/account code.\par \par When your service's contact list becomes available (either after connecting for server-side lists, or immediately for local lists), every contact and group should be synced with Adium's master list.\par \par }{\f5\cf13 For every group:\par }{\f5\cf1 If the group doesn't exist, create it.  Set yourself as an owner.\par \par if(!(group = [[owner contactController] groupWithName:name]))\{\par \tab group = [[owner contactController] createGroupNamed:name inGroup:nil];\par \}              \par }\pard \nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin0\itap0 {\f5\cf1 [group registerOwner:self];\par }\pard \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 {\f5\cf1 \par \par }{\f5\cf13 For every contact:\par }{\f5\cf1 Create a handle for the contact\par \par [[owner contactController] createHandleWithService:[service handleServiceType]\par                                                                    UID:name\par                                                                inGroup:group\par                                                             forAccount:self];\par \par \par }{\f5\cf13 When recieving content:\par }\pard \nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin0\itap0 {\f5\cf1 Add the content as a content object\par \par messageObject = [AIContentMessage messageWithSource:handle destination:self date:nil message:messageText];\par [[owner contentController] addIncomingContentObject:messageObject toHandle:handle];\par \par \par }{\f5\cf13 When a handle's status changes:\par }{\f5\cf1 Modify the handle's status array (see status control docs for more info), and call handleStatusChanged.\par \par AIMutableOwnerArray\tab *ownerArray;\par NSNumber\tab \tab *storedValue;\par \par ownerArray = [handle statusArrayForKey:@"Online"];\par storedValue = [ownerArray objectWithOwner:self];\par \par if(storedValue == nil || online != [storedValue intValue])\{\par     [ownerArray removeObjectsWithOwner:self];\par     [ownerArray addObject:[NSNumber numberWithInt:online] withOwner:self];\par \}\par \par [[owner contactController] handleStatusChanged:handle modifiedStatusKeys:[NSArray arrayWithObjects:@"Online",nil]];\par \par \par }}