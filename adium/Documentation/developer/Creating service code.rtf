{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
\f3\froman\fcharset77 Times-Bold;}
{\colortbl;\red255\green255\blue255;\red128\green0\blue0;\red118\green15\blue80;}
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b\fs28 \cf2 Adium Documentation : Creating service code\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b0 \cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\fs24 \cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 All protocol code requires 2 pieces:\
\pard\ql\qnatural
\cf0 -	A service controller\
-	An AIAccount subclass\cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b \cf2 The Service Controller\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b0 \cf0 The service controller initiates the connection between Adium and your account code.  It\'d5s responsible for identifying the type of protocol offered, and returning new instances of it\'d5s AIAccount subclass.\
\
Service controllers are implemented as a protocol, which means that any class can serve as a service controller, as long as it conforms to the protocol.  This allows an AIPlugin subclass to also serve as the controller for a service plugin, saving a bit of work.\
\
The service controller protocol consists of the following methods:\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\ql\qnatural

\f2\fs20 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\fs24 \cf0 - (NSString *)identifier;\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 Returns a string identifier for the service.  This string must be unique to the service code.  \
\
Since the identifier string is never seen by the user, it may be as cryptic as you want.  It is recommended that you use the service\'d5s name, with the specific protocol (if applicable) in parenthesis.  Such as \'d2AIM (TOC2)\'d3, where the service is AIM, and the specific protocol being used is TOC, version 2.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
- (NSString *)description;\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 Returns a string description for the service.  This string is used exclusively to inform the user about the service code, and doesn\'d5t need to be unique.\
\
It is recommended that the service\'d5s full name is used, with the specific protocol (if applicable) in parentheses.  Such as \'d2AOL Instant Messenger (TOC2)\'d3.\
\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 - (AIServiceType *)handleServiceType;
\f2\fs20 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural

\f1\fs24 \cf0 A service type is used to describe handles.  When a contact is created, users will be able to select the type of contact it is.  This will determine the icon that gets placed next to it, and the characters they're allowed to type as a handle.  Service types have 4 parts:\
\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf2 Identifier:\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 The identifier is used to differientate between service types.  It is never seen by the user and may be as cryptic as you want.  It is recommended that you use the services name as the identifier (such as "AIM" or "MSN").\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf2 \
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 Multiple service plugins may return service types with the same identifier.  This is correct.  If the handles are compatable, meaning that handles on the two services can communicate with eachother, then both services should give the same service type identifier.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf2 description:\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 The description is used when creating contacts to show the user the available choices.  It should be a human readable string that lists all the handle service types that are compatable, such as "AIM, AOL, and .Mac"\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf2 image:\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 The image is used when creating contacts, along side the description.  It should be a 16x16(?) image\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf2 caseSensitive & allowedCharacters:\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 Case sensitive should be true if case matters for contact names on this service.  Allowed characters is a characterset containing all the characters allowed in handle names.  Use this to prevent the user from entering invalid contact names.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural

\f2\fs20 \cf0 \
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural

\f1\fs24 \cf2 Sample service type:\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural

\fs22 \cf0 [AIServiceType serviceTypeWithIdentifier:@"AIM"\
description:@"AIM, AOL, and .Mac"\
image:[AIImageUtilities imageNamed:@"LilYellowDuck" forClass:[self class]] caseSensitive:NO\
allowedCharacters:[NSCharacterSet characterSetWithCharactersInString:@"abcdefghijklmnopqrstuvwxyz0123456789"]];\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\ql\qnatural

\f2\fs20 \cf0 \
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural

\f1\fs24 \cf0 - (id)accountWithProperties:(NSDictionary *)inProperties owner:(id)inOwner;\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 Should return a new instance of the custom AIAccount subclass (described below) with the specified properties\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
Because of the nature of protocols, the following methods should be implemented as well:\
- (id)retain\{ return([super retain]); \}\
- (oneway void)release\{ [super release]; \}\
- (id)autorelease \{ return([super autorelease]); \}\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\fs20 \cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\fs24 \cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b \cf2 The AIAccount Subclass\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b0 \cf0 Service code requires a custom subclass of AIAccount.  Since little code is common between protocol implementations, the AIAccount class implements very little.  It covers management of the properties dict, and provides class variables for 'owner' (A reference to AIAdium) and 'service' (A reference to the service controller that spawned the account).\
\
Because of the dynamic nature of accounts, their methods are implemented using protocols.  When creating an account you can pick and choose which protocols to implement (with the exception of AIAccount_Required, which must be implemented).  They are:\
\
\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf2 Protocol: AIAccount_Required\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 Required methods\
\
- (void)initAccount;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 Called after the account has inited, so the custom code can init.  This is where anything account related should be setup\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
- (id <AIAccountViewController>)accountView;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 This method should return an accountViewController with fields for any required information.  Password information should not be requested.\
\
\pard\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1080\ql\qnatural

\fs22 \cf0 The account view controller protocol defines 2 methods:\
- (NSView *)view;\
- (void)saveChanges;\
\
View should return an NSView containing fields for any information required for the service to work.  Typically this will just be an account name field, but anything else required should be included.  The view must be 350 pixels wide, but can be any height.\
\
The account view controller is responsible for saving changes made in the view in response to the saveChanges method.  It is also responsible for setting up the view before returning it.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\fs24 \cf0 	\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 - (NSString *)accountID;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 Every account has a unique string identifier that distinguishes it from other accounts.  This string shold not only be unique to the service code, but to the individual account as well.\
\
It is recommended that this method returns a combination of the service identifier and account login, seperated by a period - such as "AIM.resimada".\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 - (NSString *)accountDescription;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 When an account list is presented to the user, the string returned by this method is used to describe the account instance.  In most situations, simply returning the account login here will be desired.  But if for whatever reason a more descriptive name is required, it can be returned.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf2 Protocol: AIAccount_Content\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 Support for sending content to contacts\
\
- (BOOL)sendContentObject:(id <AIContentObject>)object toHandle:(AIContactHandle *)inHandle;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 In response to this method, the account should send the passed content to the specified handle.  For more information on content, check out the content docs.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\ql\qnatural

\f2 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1 \cf2 Protocol: AIAccount_Handles\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 Support for standard UID based handles (ungrouped)\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 - (BOOL)contactListEditable;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 Since most contact lists will be stored server-side, they will not always be available for editing. Return YES the list is available for editing, and NO if not. For locally stored lists, YES can always be returned.\
\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 	Returning NO will disable any list editing options in the Adium interface.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
- (BOOL)addHandle:(AIContactHandle *)handle;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 The account code should add the passed handle to it's server side or local contact list.  The Handle's UID can be retrieved using AIContactHandle's UID method.\
\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 - (BOOL)removeHandle:(AIContactHandle *)handle;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 The account code should remove the passed handle from it's server side or local contact list.  The Handle's UID can be retrieved using AIContactHandle's UID method.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 - (BOOL)renameHandle:(AIContactHandle *)handle to:(NSString *)inName;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 In response to his method, the passed handle should be renamed to inName.  inName serves as the handles new UID.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural

\f2 \cf3 \
\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1 \cf2 protocol: AIAccount_GroupedHandles\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 Support for UID based, grouped handles\
\
- (BOOL)contactListEditable;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 Since most contact lists will be stored server-side, they will not always be available for editing. Return YES if the list is available for editing, and NO if not. For locally stored lists, YES can always be returned.\
\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 	Returning NO will disable any list editing options in the Adium interface.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
- (BOOL)addHandle:(AIContactHandle *)handle toGroup:(AIContactGroup *)group;    \
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 The account code should add the passed handle to it's server side or local contact list, into the specified group.  The Handle's UID can be retrieved using AIContactHandle's UID method.  The group name can be retrieved using group's displayName method.\
\
If group is nil, the Handle should be added to the root of the contact list.  If this is not supported, it should be added to a special/custom group.  An example of this would be using a group named 'contact list' to store these 'root' contacts.\
\
Account code shouldn't worry about groups within groups.  Only pay attention to the group passed to this method.  Adium will never allow two groups with the same name, so there won't be any conflicts.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0     - (BOOL)removeHandle:(AIContactHandle *)handle fromGroup:(AIContactGroup *)group;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 The account code should remove the passed handle from it's server side or local contact list, out of the specified group.  The Handle's UID can be retrieved using AIContactHandle's UID method. The group name can be retrieved using group's displayName method.\
\
If group is nil, the Handle should be removed from the root of the contact list.  If this is not supported, remove the handle from the custom group discussed above.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 - (BOOL)renameHandle:(AIContactHandle *)handle inGroup:(AIContactGroup *)group to:(NSString *)inName;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 In response to this method the passed handle, in the specified group, should be renamed to inName.  inName serves as the handles new UID.\
\
The same notes apply to group as above (regarding nil and nested groups).\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
- (BOOL)moveHandle:(AIContactHandle *)handle fromGroup:(AIContactGroup *)sourceGroup toGroup:(AIContactGroup *)destGroup;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 The passed handle should be moved from sourceGroup to destGroup.  The same notes apply to group as above (regarding nil and nested groups).\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
    \
- (BOOL)addGroup:(AIContactGroup *)newGroup;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 A group should be added. The group name can be retrieved using newGroup's displayName method.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 - (BOOL)removeGroup:(AIContactGroup *)group;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 A group should be added. The group name can be retrieved using group's displayName method.\
\
Adium will always instruct the account to empty the group's contents before removing it, so only empty groups will ever be passed to this method.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
- (BOOL)renameGroup:(AIContactGroup *)group to:(NSString *)inName;\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0 The passed group should be renamed to inName. The group's existing name can be retrieved using group's displayName method.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\ql\qnatural

\f2 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1 \cf2 protocol: AIAccount_Status\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural
\cf0 Support for the basic status of offline, online, connecting, and disconnecting\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li360\ql\qnatural
\cf0 - (ACCOUNT_STATUS)status;\
Should return the current account connection status.  One of:\
STATUS_OFFLINE \'d0 The account is offline\
STATUS_CONNECTING \'d0 The account is connecting\
STATUS_ONLINE \'d0 The account is online\
STATUS_DISCONNECTING \'d0 The account is disconnecting\
 \
- (void)connect;\
Do what is necessary to get this account into STATUS_ONLINE\
 \
- (void)disconnect;\
Do what is necessary to get this account into STATUS_OFFLINE\
\pard\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\ql\qnatural
\cf0     \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\ql\qnatural

\f2 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f3\b\fs28 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\fs24 \cf2 Other useful methods for service code
\f3\fs28 \cf0 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural

\f1\b0\fs24 \cf0 The account controller will lend a hand in password usage.  Before attempting to connect, call the method:\
- (void)passwordForAccount:(AIAccount *)inAccount notifyingTarget:(id)inTarget selector:(SEL)inSelector;\
\
When the password becomes available (either from the user's keychain, or as a result of a password prompt), the target and selector will be notified.  The password (an NSString) is passed to the selector.\
\
If nil is passed to the selector, the password is unavailable.  The account code should fail gracefully in this situation, canceling the operation it was attempting. \
\
The account controller handles all the details, including keychain storage and the 'enter password' interface.  However, when an account is done with a specific password, it must be manually removed from the keychain (if desired) using accountController's method:\
\
- (void)forgetPasswordForAccount:(AIAccount *)inAccount;\
\
This method will forget a password if it was on the keychain, and do nothing if the password wasn't on the keychain.\
\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural

\f0\b \cf2 Making it work\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural

\f1\b0 \cf0 In your plugins installPlugin method, register your service controller using account controller's method:\
- (void)registerService:(id <AIServiceController>)inService;\
This must be called from within an installPlugin method.  This is all that is needed to register your service/account code.\
\
When your service's contact list becomes available (either after connecting for server-side lists, or immediately for local lists), every contact and group should be synced with Adium's master list.\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural
\cf2 For every group:\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural
\cf0 If the group doesn't exist, create it.  Set yourself as an owner.\
\
if(!(group = [[owner contactController] groupWithName:name]))\{\
	group = [[owner contactController] createGroupNamed:name inGroup:nil];\
\}              \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\ql\qnatural
\cf0 [group registerOwner:self];\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural
\cf0 \
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural
\cf2 For every contact:\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural
\cf0 Create a handle for the contact\
\
[[owner contactController] createHandleWithService:[service handleServiceType]\
                                                                   UID:name\
                                                               inGroup:group\
                                                            forAccount:self];\
\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural
\cf2 When recieving content:\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\ql\qnatural
\cf0 Add the content as a content object\
\
messageObject = [AIContentMessage messageWithSource:handle destination:self date:nil message:messageText];\
[[owner contentController] addIncomingContentObject:messageObject toHandle:handle];\
\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\ql\qnatural
\cf2 When a handle's status changes:\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\ql\qnatural
\cf0 Modify the handle's status array (see status control docs for more info), and call handleStatusChanged.\
\
AIMutableOwnerArray	*ownerArray;\
NSNumber		*storedValue;\
\
ownerArray = [handle statusArrayForKey:@"Online"];\
storedValue = [ownerArray objectWithOwner:self];\
\
if(storedValue == nil || online != [storedValue intValue])\{\
    [ownerArray removeObjectsWithOwner:self];\
    [ownerArray addObject:[NSNumber numberWithInt:online] withOwner:self];\
\}\
\
[[owner contactController] handleStatusChanged:handle modifiedStatusKeys:[NSArray arrayWithObjects:@"Online",nil]];\
\
\
}