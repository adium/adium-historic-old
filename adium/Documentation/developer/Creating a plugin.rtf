{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fmodern\fcharset77 CourierNewPSMT;
\f3\froman\fcharset77 Times-Roman;\f4\froman\fcharset77 Times-Bold;\f5\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red128\green0\blue0;\red104\green56\blue33;\red118\green15\blue80;
}
\margl1440\vieww9200\viewh8700\viewkind1\viewscale100
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b\fs28 \cf2 Adium Documentation : Creating a plugin.\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b0 \cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\fs24 \cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 Whenever possible, features should be added to Adium 2.0 as plugins.  Plugins not only allow great user customization, but help enforce object oriented design as well, keeping the Adium codebase clean and stable.\
\
While not all plugins will be distributed with the Adium application, they will be easier to keep track of and maintain if they\'d5re all built within the Adium project and stored on the Adium sourceforge cvs. \
\
There are quite a few steps involved in creating a plugin:\
\
\pard\ql\qnatural

\fs22 \cf0 -	
\f0\b Create a new target in the Adium project\
\pard\ql\qnatural

\f2\b0 \cf0 o	
\f1 With the Adium project open, select \'d4New Target\'d5 from the Project menu.\

\f2 o	
\f1 Select \'d4Bundle\'d5 from the list, enter your plugin\'d5s name\

\f2 o	
\f1 Check to include your plugin in 'Adium'\

\f2 o	
\f1 Create the bundle\
-	C
\f0\b hange the bundle\'d5s extension to \'d4AdiumPlugin\'d5\

\f2\b0 o	
\f1 In Project Builder\'d5s targets pane, select your plugin from the list\

\f2 o	
\f1 In Settings->build settings, change the word \'d4bundle\'d5 next to \'d4WRAPPER_EXTENSION\'d5 to \'d4AdiumPlugin\'d5\

\f2 o	
\f1 In Info.plist Entries->Cocoa Specific, enter the name of your principal class.  The class will be \'d4AI<PluginName>Plugin\'d5.  You may use your own initials in place of AI if desired. \
-	
\f0\b Make your target dependent on the necessary frameworks\

\f2\b0 o	
\f1 Drag the target \'d4Adium.Framework\'d5 and \'d4AIUtilities.Framework\'d5 into your plugin\'d5s target.\
-	
\f0\b Create a group for your plugin\

\f2\b0 o	
\f1 In the files pane, create a new group (Project->New Group)\

\f2 o	
\f1 Name this group after your plugin, and place it at the bottom of the \'d4---plugins---\'d4 section.\
-	
\f0\b Create a plugin source file\

\f2\b0 o	
\f1 Create a new \'d4Objective-C Class\'d5 (File->New) with the class filename you used above AI<PluginName>Plugin\'d5\

\f2 o	
\f1 Select your plugin\'d5s target and add this file.
\f0\b \
\pard\ql\qnatural

\f1\b0 \cf0 -	
\f0\b Link to the frameworks\
\pard\ql\qnatural

\f2\b0 \cf0 o	
\f1 Select your target from the \'d4Active Target\'d5 popup
\f0\b \

\f2\b0 o	
\f1 On the files pane, open the \'d4frameworks\'d5 group\

\f2 o	
\f1 Check to include Adium.Framework and AIUtilities.Framework.  Also check the other frameworks you\'d5re using. (Such as Cocoa.Framework)\
-	
\f0\b Build your plugin\

\f2\b0 o	
\f1 With your plugin selected in the \'d4active target\'d5 popup, click the build button.  It should build without errors.  If there are errors you need to resolve them.\
-	
\f0\b Add your plugin to the default Adium build\

\f2\b0 o	
\f1 Go to the targets pane and select the Adium target
\fs24 \

\f2\fs22 o	
\f1 In BuildPhases, drag your plugin from whichever category it was placed in to \'d4Copy files (plugins)\'d5
\fs24 \
\pard\ql\qnatural

\f3 \cf0 \
\pard\ql\qnatural

\f1 \cf0 I wish there was a way to simplify these steps.. if you know of one please let me know.\
\
The AI<Plugin Name>Class you create will serve as the main class and initializer of your plugin.  It should be a subclass of AIPlugin.\
\pard\ql\qnatural

\f3 \cf0 \
\pard\ql\qnatural

\f4\b \cf2 Sample AI<Plugin Name>Plugin.h\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural

\f5\b0\fs20 \cf3 #import <Cocoa/Cocoa.h>\cf0 \
\cf3 #import <Adium/Adium.h>\cf0 \
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural
\cf4 @interface\cf0  AI<PluginName>Plugin : AIPlugin \{\
\
\}\
\
\cf4 @end\cf0 \
\pard\ql\qnatural

\f3\fs24 \cf0 \
\pard\ql\qnatural

\f4\b \cf2 Sample AI<Plugin Name>Plugin.m\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural

\f5\b0\fs20 \cf3 #import <AIUtilities/AIUtilities.h>\cf0 \
\cf3 #import <Adium/Adium.h>\cf0 \
\cf3 #import "AIAdium.h"\cf0 \
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\fi-480\ql\qnatural
\cf4 @implementation\cf0  AI<PluginName>Plugin\
\
- (\cf4 void\cf0 )installPlugin\
\{\
	NSLog(@\'d3Hello\'d3);\
\}\
\pard\ql\qnatural

\f3\fs24 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1 \cf0 The install plugin method is called as your plugin loads.  This is where you want to use Adium\'d5s core controllers to perform your task, or register code to perform the task later.  Subclasses of AIPlugin automatically inherit the variable \'d4owner\'d5, which is a reference to the main AIAdium class.\
\
Owner can be used to access all the Adium core controllers.  ( [owner menuController], [owner accountController], etc)\
\
From this point you\'d5re on your own and can do whatever you want using the core controllers.\
}