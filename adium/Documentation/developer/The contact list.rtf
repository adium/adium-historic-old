{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;\red128\green0\blue0;}
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b\fs28 \cf2 Adium Documentation : The contact list\
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b0 \cf2 \
\pard\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\fs24 \cf2 \
\pard\ql\qnatural
\cf0 Adium's contact list is made up of AIContactObjects, or more specifically, subclasses of AIContactObject.  AIContactGroup and AIContactHandle make up the majority of the contact list.\
\
The contact list is a delicate, complicated structure.  Care should be taken to only modify the list using AIContactController's methods. \
\
\pard\ql\qnatural

\f0\b \cf2 Ownership\
\pard\ql\qnatural

\f1\b0 \cf0 Adium's master contact list is stored locally.  As accounts connect, they sync their lists with the Adium master list.  While every object is on the master list, only a selection of them may be on the contact list of a given account.  When an object is on the contact list of an account, it is said to be owned by that account.\
\
A single object may be owned by more than one account, and a single account may (and most likey will) own more than one object.\
\
The ownership of objects can be changed using contactController's methods:\
- (void)addAccount:(AIAccount<AIAccount_Handles> *)inAccount toObject:(AIContactObject *)inObject;\
- (void)removeAccount:(AIAccount<AIAccount_Handles> *)inAccount fromObject:(AIContactObject *)inObject;\
\
The presence of an object on an account can be tested with AIContactObject's:\
- (BOOL)belongsToAccount:(AIAccount *)inAccount;\
\
\
\pard\ql\qnatural

\f0\b \cf2 Groups\
\pard\ql\qnatural

\f1\b0 \cf0 AIContactGroups are contactObjects that store other contact objects.  This means that groups can be placed within groups.  The contact list itself is a group (the root group), containing handles and groups, which may contain additional handles and groups, and so on.  There is no hard cap on nested groups.\
\
The containing group of any contactObject can be retrieved using:\
- (AIContactGroup *)containingGroup;\
\
Groups can be created, deleted, and renamed using contactController's methods:\
- (AIContactGroup *)createGroupNamed:(NSString *)inName inGroup:(AIContactGroup *)inGroup;\
- (void)deleteGroup:(AIContactGroup *)inGroup;\
- (void)renameGroup:(AIContactGroup *)inGroup to:(NSString *)newName;\
\
The current name of a group is retrieved using AIContactGroup's displayName method.\
\
\
\pard\ql\qnatural

\f0\b \cf2 Handles\
\pard\ql\qnatural

\f1\b0 \cf0 AIContacthandles are contactObjects that represent an individual user.  They can be managed using the methods:\
- (void)deleteHandle:(AIContactHandle *)inHandle;\
- (void)renameHandle:(AIContactHandle *)inHandle to:(NSString *)newName;\
- (void)moveHandle:(AIContactHandle *)inHandle toGroup:(AIContactGroup *)inGroup;\
\
To move / manage contacts at the root of the contact list, use nil as the group.\
\
To explicitly create a handle, use the method:\
- (AIContactHandle *)createHandleWithService:(AIServiceType *)inService UID:(NSString *)inUID inGroup:(AIContactGroup *)inGroup forAccount:(AIAccount *)inAccount;\
\pard\li360\ql\qnatural
\cf0 \
\pard\ql\qnatural
\cf0 This requires an AIServiceType (returned by a service controller's 'handleServiceType' method - A list of installed service controllers is available from account controller's availableServiceArray method).  It also requires the desired UID and group, and the account this handle should initially be owned by.\
\
If the handle does not exist on the contact list: it will be created.\
If the handle 
\f2\i does
\f1\i0  exist on the list, in the same group: nothing will happen.\
If the handle 
\f2\i does
\f1\i0  exist on the list, in a different group: an 'out of sync' condition will occur and the user will be prompted for the desired handle location.\
\
In all cases:\
- an AIContactHandle is returned (either the existing one, or a new one).\
- inAccount will be added as an owner for the handle\
\
Contact handles also provide access to their service type and UID:\
- (AIServiceType *)service;\
- (NSString *)UID;\
\
\
\pard\ql\qnatural

\f0\b \cf2 Accessing & Searching\
\pard\ql\qnatural

\f1\b0 \cf0 If you need it, the root contact list group can be retrieved using contactController's method:\
- (AIContactGroup *)contactList;\
\
\
When searching for a group, use:\
- (AIContactGroup *)groupWithName:(NSString *)inName;\
\pard\li360\ql\qnatural
\cf0 This method will search the contact list for a group with the passed name.  The placement of the group is not important.  Nil is returned is the group does not exist.\
\pard\ql\qnatural
\cf0 \
\
- (AIContactHandle *)handleWithService:(AIServiceType *)inService UID:(NSString *)inUID forAccount:(AIAccount *)inAccount;\
\pard\li360\ql\qnatural
\cf0 This method will search the contact list for a handle with the passed name and service type.  The placement of the handle is not important.\
If the handle does not exist, it will be created in the strangers group, set as owned by the passed account, and returned.\
\
The implementation details of the strangers group are not important.  All that you need to know is this method always returns the requested contact, even if it doesn't exist on the user's contact list.\
\pard\ql\qnatural
\cf0 \
\
- (NSMutableArray *)allContactsInGroup:(AIContactGroup *)inGroup subgroups:(BOOL)subGroups ownedBy:(AIAccount *)inAccount;\
\pard\li360\ql\qnatural
\cf0 This method is useful when building a list of available contacts. It will return an array of all the contacts within the specified group.\
\
inGroup - the group to search in (nil for the contact list root)\
subgroups - if yes, subgroups will be searched as well\
inAccount - if an account is passed, only contacts owned by that account are returned.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\li480\ql\qnatural
\cf0 \
}