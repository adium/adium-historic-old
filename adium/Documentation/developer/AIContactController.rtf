{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman{\*\falt Times};}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Helvetica;}{\f155\fswiss\fcharset77\fprq0{\*\panose 00000000000000000000}Helvetica-Oblique{\*\falt Times};}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman{\*\falt Times};}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Helvetica;}{\f155\fswiss\fcharset77\fprq0{\*\panose 00000000000000000000}Helvetica-Oblique{\*\falt Times};}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f4\lang1033\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\info{\title AIContactController}{\author Adam Iser}{\operator Adam Iser}{\creatim\yr2003\mo1\dy2\hr10\min29}{\revtim\yr2003\mo1\dy2\hr10\min57}{\version12}{\edmins26}{\nofpages7}{\nofwords1584}{\nofchars9029}{\nofcharsws11088}{\vern16561}}\paperw12226\paperh15826\margl1440 \widowctrl\ftnbj\aenddoc\formshade\horzdoc\dghspace180\dgvspace180\dghorigin1701\dgvorigin1984\dghshow0\dgvshow0\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule \fet0\sectd \linex-32767\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f4\lang1033\cgrid {\fs32\cf1 AIContactController\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 Adium's contact list is made up of AIContactObjects, or more specifically, subclasses of AIContactObject.  AIContactGroup and AIContactHandle make up the majority of the contact list.\par \par The contact list is a delicate, complicated structure.  Care should be taken to only modify the list using AIContactController's methods. \par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\par \par }{\b\f5\cf13 Contact controller notifications\par }{\b\cf13 {\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par - (NSNotificationCenter *)}{\b\cf1 contactNotificationCenter}{\cf1 ;\par \par }\pard \li360\nowidctlpar\tx360\faauto\rin0\lin360\itap0 {\b\fs22 Contact_AttributesChanged\par }\pard \li720\nowidctlpar\faauto\rin0\lin720\itap0 {\b\fs22 Cause:}{\fs22  A contact object's attributes have changed\par }{\b\fs22 Object:}{\fs22  The contact object (AIContactObject)\par }{\b\fs22 UserInfo: \par }{\fs22 @"Keys" - The modified attribute keys (NSArray)\par }{\b\fs22 \par }\pard \li360\nowidctlpar\faauto\rin0\lin360\itap0 {\b\fs22 Contact_StatusChanged\par }\pard \li720\nowidctlpar\faauto\rin0\lin720\itap0 {\b\fs22 Cause:}{\fs22  A contact object's status has changed\par }{\b\fs22 Object:}{\fs22  The contact object (AIContactObject)\par }{\b\fs22 UserInfo: \par }{\fs22 @"Keys" - The modified status keys (NSArray)\par \par }\pard \li360\nowidctlpar\faauto\rin0\lin360\itap0 {\b\fs22 Contact_ObjectChanged\par }\pard \li720\nowidctlpar\faauto\rin0\lin720\itap0 {\b\fs22 Cause:}{\fs22  A contact object's content or internal properties have changed (A result of contact list editing)\par }{\b\fs22 Object:}{\fs22  The contact object (AIContactObject)\par }{\b\fs22 UserInfo: }{\fs22 nil\par If something is being done in response to this notification that is CPU consuming, optional, and performed in response to 'contact_ListChanged' as well, it is recommended to do nothing if contactListUpdatesDelayed returns YES.\par \par }\pard \li360\nowidctlpar\faauto\rin0\lin360\itap0 {\b\fs22 Contact_ListChanged\par }\pard \li720\nowidctlpar\faauto\rin0\lin720\itap0 {\b\fs22 Cause:}{\fs22  The contact list's content has changed, the whole list should be refreshed.\par }{\b\fs22 Object:}{\fs22  nil\par }\pard \li720\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\b\fs22 UserInfo: }{\fs22 nil}{\cf1 \par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f5\cf13 \par \par Object ownership & accounts\par }{\b\cf13 {\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par - (void)}{\b\cf1 addAccount}{\cf1 :(AIAccount *)inAccount }{\b\cf1 toObject}{\cf1 :(AIContactObject *)inObject;\par - (void)}{\b\cf1 removeAccount}{\cf1 :(AIAccount *)inAccount }{\b\cf1 fromObject}{\cf1 :(AIContactObject *)inObject;\par \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 Adium's master contact list is stored locally.  As accounts connect, they sync their lists with the Adium master list.  While every object is on the master list, only a selection of them may be on the contact list of a given account.  When an object is on the contact list of an account, it is said to be owned by that account.\par \par A single object may be owned by more than one account, and a single account may (and most likey will) own more than one object.\par \par The ownership of objects can be changed using contactController's addAccount  and removeAccount methods.\par \par The presence of an object on an account can be tested with AIContactObject's:\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\cf1 - (BOOL)}{\b\cf1 belongsToAccount}{\cf1 :(AIAccount *)inAccount;\par }{\b\f5\cf13 \par \par About Groups and Handles\par }{\b\cf13 {\pict{\*\picprop\shplid1035{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 AIContactGroups are contactObjects that store other contact objects.  This means that groups can be placed within groups.  The contact list itself is a group (the root group), containing handles and groups, which may contain additional handles and groups, and so on.  There is no hard cap on nested groups.\par \par To specify the root of the contact list in any of the following methods, pass nil as the group.\par \par The containing group of any contactObject can be retrieved using:\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\cf1 - (AIContactGroup *)}{\b\cf1 containingGroup}{\cf1 ;\par \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 AIContacthandles are contactObjects that represent an individual user\par \par Contact handles also provide access to their service type and UID:\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\cf1 - (AIServiceType *)}{\b\cf1 service}{\cf1 ;\par - (NSString *)}{\b\cf1 UID}{\cf1 ;\par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 \par The current name of an object is retrieved using AIContactObject's:\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\cf1 -(NSString *)}{\b\cf1 displayName}{\cf1 ;\par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 \par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f5\cf13 \par \par Creating groups and handles\par }{\b\cf13 {\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par - (AIContactHandle *)}{\b\cf1 createHandleWithService}{\cf1 :(AIServiceType *)inService }{\b\cf1 UID}{\cf1 :(NSString *)inUID }{\b\cf1 inGroup}{\cf1 :(AIContactGroup *)inGroup }{\b\cf1 forAccount}{\cf1 :(AIAccount *)inAccount;\par - (AIContactGroup *)}{\b\cf1 createGroupNamed}{\cf1 :(NSString *)inName }{\b\cf1 inGroup}{\cf1 :(AIContactGroup *)inGroup;\par - (void)}{\b\cf1 delayContactListUpdatesFor}{\cf1 :(int)seconds;\par - (BOOL)}{\b\cf1 contactListUpdatesDelayed}{\cf1 ;\par \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 Create groups using the createGroupNamed method, and handles using createHandleWithService.\par \par createHandleWithService requires an AIServiceType (returned by a service controller's 'handleServiceType' method - A list of installed service controllers is available from account controller's availableServiceArray method).  It also requires the desired UID and group, and the account this handle should initially be owned by.\par \par If the handle does not exist on the contact list: it will be created.\par If the handle }{\i\f155 does}{\f5  exist on the list, in the same group: nothing will happen.\par If the handle }{\i\f155 does}{\f5  exist on the list, in a different group: an 'out of sync' condition will occur and the user will be prompted for the desired handle location.\par \par In all cases:\par - an AIContactHandle is returned (either the existing one, or a new one).\par - inAccount will be added as an owner for the handle\par \par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\cf1 \par }{\b\f5\cf13 \par Managing objects\par }{\b\cf13 {\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par - (void)}{\b\cf1 deleteObject}{\cf1 :(AIContactObject *)object;\par - (void)}{\b\cf1 renameObject}{\cf1 :(AIContactObject *)object to}{\b\cf1 :(}{\cf1 NSString *)newName;\par - (void)}{\b\cf1 moveObject}{\cf1 :(AIContactObject *)object }{\b\cf1 toGroup}{\cf1 :(AIContactGroup *)destGroup }{\b\cf1 index}{\cf1 :(int)inIndex;\par \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 To move / manage objects at the root of the contact list, use nil as the group.\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f5\cf13 \par \par Accessing & finding objects\par }{\b\cf13 {\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par - (AIContactGroup *)}{\b\cf1 contactList}{\cf1 ;\par - (AIContactGroup *)}{\b\cf1 groupWithName}{\cf1 :(NSString *)inName;\par - (AIContactHandle *)}{\b\cf1 handleWithService}{\cf1 :(AIServiceType *)inService }{\b\cf1 UID}{\cf1 :(NSString *)inUID }{\b\cf1 forAccount}{\cf1 :(AIAccount *)inAccount;\par - (NSMutableArray *)}{\b\cf1 allContactsInGroup}{\cf1 :(AIContactGroup *)inGroup subgroups:(BOOL)subGroups }{\b\cf1 ownedBy}{\cf1 :(AIAccount *)inAccount;\par \par \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 If you need it, the root contact list group can be retrieved using contactController's contactList method.\par \par Your code is allowed to retain and hold onto the group returned by this method.  However, if this is done, your code }{\b\f5 must}{\f5  register as an observer to Contact_ListChanged, and }{\b\f5 obtain a new reference}{\f5  to the contact list in response ot the notification.\par \par \par groupWithName will search the contact list for a group with the passed name.  The placement of the group is not important.  Nil is returned is the group does not exist.\par \par \par handleWithService searches the contact list for a handle with the passed name and service type.  The placement of the handle is not important.\par If the handle does not exist, it will be created in the strangers group, set as owned by the passed account, and returned.\par \par The implementation details of the strangers group are not important.  All that you need to know is this method always returns the requested contact, even if it doesn't exist on the user's contact list.\par \par \par allContactsInGroup is useful when building a list of available contacts. It will return an array of all the contacts within the specified group.\par \par inGroup - the group to search in (nil for the contact list root)\par subgroups - if yes, subgroups will be searched as well\par inAccount - if an account is passed, only contacts owned by that account are returned.\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\cf1 \par \par }{\b\f5\cf13 \par Object attributes\par }{\b\cf13 {\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 The display attributes of a contactObject allow multiple pieces of code to work together and determine the best way for displaying contactObjects.\par \par Attributes are stored by key within the individual contact objects. \par \par Since many seperate pieces of code will apply attributes of the same type to the same contact object, attributes are stored in owner arrays, one for each key.  See the owner array documentation for more information on how they work.\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f5\cf13 \par \par \par Displaying objects\par }{\b\cf13 {\pict{\*\picprop\shplid1037{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 The base for displaying all contact objects is the display Name.  Starting with this name as a base, display code can enhance it using the contact object's attributes.  Each attribute is stored in an owner array, and identifier by a key.  While many attributes may appear in the future, the current ones are:\par \par "Hidden" (NSNumber) \par }\pard \li360\nowidctlpar\faauto\rin0\lin360\itap0 {\f5 YES if the object should not be displayed.  Otherwise NO.\par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 \par "Text Color" (NSColor)\par }\pard \li360\nowidctlpar\faauto\rin0\lin360\itap0 {\f5 The color of the object's display name string.\par \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 "Left View" (id <AIHandleLeftView>)\par }\pard \li360\nowidctlpar\faauto\rin0\lin360\itap0 {\f5 A view to display left of the object's display name string.\par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 \par \par The attribute array for a particular key is retrieved using AIContactObject's:\par }{- (AIMutableOwnerArray *)displayArrayForKey:(NSString *)inKey;\par }{\f5 \par The owner array can then be averaged/summed (see the owner array docs for more info), and used to alter the display of the object.\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f5\cf13 \par \par \par Altering object display\par }{\b\cf13 {\pict{\*\picprop\shplid1038{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par - (void)}{\b\cf1 objectAttributesChanged}{\cf1 :(AIContactObject *)inObject }{\b\cf1 modifiedKeys}{\cf1 :(NSArray *)inModifiedKeys;\par }{\b\f5\cf13 \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 By adding and removing values in the atribute arrays, any code can modify the appearance of contact objects throughout Adium. \par \par The following code marks 'handle' to display with red text:\par \par }{AIMutableOwnerArray\tab *colorArray;\par \par colorArray = [handle displayArrayForKey:@"Text Color"];\par [colorArray removeObjectsWithOwner:self];\par [colorArray addObject:[NSColor redColor] withOwner:self];\par }{\f5 \par Notice that the code first removes any existing objects from the array before adding a new one.  It is advised to only have one object (owned by you) in an array at a time.\par \par After modifying the display attributes, call contact controller's objectAttributesChanged method, passing the keys that have been modified.\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f5\cf13 \par \par \par Object status\par }{\b\cf13 {\pict{\*\picprop\shplid1036{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par }\pard \nowidctlpar\faauto\rin0\lin0\itap0 {\f5 AIContactObject's status array allows multiple accounts to set a handle's status.  Status flags are stored by key, and should acurately reflect the contactHandle's current state.\par \par Since many seperate accounts will apply status flags of the same type to the same contact object, they are stored in owner arrays, one for each key.  See the owner array documentation for more information on how they work.\par \par AIContactObject's method:\par - (AIMutableOwnerArray *)statusArrayForKey:(NSString *)inKey;\par returns the status array for a given key.  The currently active status keys are: \par \par "Online" (NSNumber)\par YES if available.\par \par "Warning" (NSNumber)\par % warning level, 0% (no warning) to 100% (full warning)\par \par "Idle" (NSNumber)\par 0 if not idle, otherwise number of seconds idle.\par \par "Signon Date" (NSDate)\par The date/time the user became available\par \par "Away" (NSNumber)\par YES if away.\par \par "Client" (NSString)\par A String description of the user's client software\par \par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\cf1 \par \par }{\b\f5\cf13 Observing status changes, handle observers\par }{\b\cf13 {\pict{\*\picprop\shplid1042{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par - (void)}{\b\cf1 handleStatusChanged}{\cf1 :(AIContactHandle *)inHandle }{\b\cf1 modifiedStatusKeys}{\cf1 :(NSArray *)InModifiedKeys;\par - (void)}{\b\cf1 registerHandleObserver}{\cf1 :(id)inObserver;\par \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5 Using AIContactController and a handle observer, plugins can observe status changes in handles.  A handle observer must conform to the AIHandleObserver protocol, which defines the method:\par }\pard \nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin0\itap0 {\cf1 - (NSArray *)}{\b\cf1 updateHandle}{\cf1 :(AIContactHandle *)inHandle }{\b\cf1 keys}{\cf1 :(NSArray *)inModifiedKeys;\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\f5 \par When a handle's status is modified, this method is automatically called for all registered observer code.  Passed is the handle being modified, and an array of the keys that are changing.\par \par With the knowledge that something has changed, the handle observer can do whatever it wants as a response.  However, the most common handle observer behavior is to modify the display attributes of the handle that has changed.\par \par If the observed modifies the handle's attributes in response to the status change, it should return an array containing all the modified attribute keys.  If nothing has been modified, return nil.\par \par To register a handle observer, pass it to AIContactController using the }{\f5 registerHandleObserver}{\f5  method.\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\cf1 \par \par \par }{\b\f5\cf13 Sorting the contact list\par }{\b\cf13 {\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par - (void)}{\b\cf1 registerContactSortController}{\cf1 :(id <AIContactSortController>)inController;\par - (void)}{\b\cf1 sortContactGroup}{\cf1 :(AIContactGroup *)inGroup }{\b\cf1 mode}{\cf1 :(AISortMode)sortMode;\par \par No docs yet, See the alphabetical sort for an example :)\par \par \par }{\b\f5\cf13 Contact info\par }{\b\cf13 {\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 11184810}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn alignHR}{\sv 1}}{\sp{\sn dxHeightHR}{\sv 30}}{\sp{\sn fStandardHR}{\sv 1}}{\sp{\sn fHorizRule}{\sv 1}}}\picscalex898\picscaley6\piccropl0\piccropr0\piccropt0\piccropb0\picw50\pich25\picwgoal1000\pichgoal500\macpict}}{\cf1 \par - (void)}{\b\cf1 showInfoForContact}{\cf1 :(AIContactHandle *)inContact;\par - (void)}{\b\cf1 addContactInfoView}{\cf1 :(AIPreferenceViewController *)inView;\par \par }{\cf1 No docs yet, See the }{\cf1 alias support}{\cf1  for an example :)\par }{\b\f5\cf13 \par }{\cf1 \par }}