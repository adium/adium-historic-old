{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman;}{\f2\fnil\fcharset256\fprq2{\*\panose 00020703090202050204}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 00020005000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f6\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 00020b05030304040402}Geneva;}{\f14\fnil\fcharset2\fprq2{\*\panose 00050201020108040807}Wingdings;}{\f18\froman\fcharset77\fprq0{\*\panose 00000000000000000000}Times-Roman{\*\falt Times};}{\f19\froman\fcharset77\fprq0{\*\panose 00000000000000000000}Times-Bold{\*\falt Times};}{\f20\fmodern\fcharset77\fprq0{\*\panose 00000000000000000000}Courier-Bold{\*\falt Times};}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman;}{\f2\fnil\fcharset256\fprq2{\*\panose 00020703090202050204}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 00020005000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f6\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 00020b05030304040402}Geneva;}{\f14\fnil\fcharset2\fprq2{\*\panose 00050201020108040807}Wingdings;}{\f18\froman\fcharset77\fprq0{\*\panose 00000000000000000000}Times-Roman{\*\falt Times};}{\f19\froman\fcharset77\fprq0{\*\panose 00000000000000000000}Times-Bold{\*\falt Times};}{\f20\fmodern\fcharset77\fprq0{\*\panose 00000000000000000000}Courier-Bold{\*\falt Times};}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green92\blue2;\red214\green0\blue255;\red118\green15\blue80;}{\stylesheet{\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f4\lang1033\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li240\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin240\itap0 \f18\lang1033\cgrid \sbasedon0 \snext15 Body Text 2;}}{\*\listtable{\list\listtemplateid1074167898\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\leveltemplateid406111162\'01-;}{\levelnumbers;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li720\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid197641\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid328713\'01\u-3929 _;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid66569\'01\u-3913 _;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \loch\af3\dbch\af0\hich\f3 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid197641\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid328713\'01\u-3929 _;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid66569\'01\u-3913 _;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \loch\af3\dbch\af0\hich\f3 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid197641\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid328713\'01\u-3929 _;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }{\listname ;}\listid1944680399}}{\*\listoverridetable{\listoverride\listid1944680399\listoverridecount0\ls1}}{\info{\author Adam Iser}{\operator Adam Iser}{\creatim\yr2002\mo12\dy16\hr16\min15}{\revtim\yr2002\mo12\dy16\hr17\min35}{\version19}{\edmins44}{\nofpages18}{\nofwords3492}{\nofchars19905}{\nofcharsws24444}{\vern16561}}\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dgmargin\dghspace120\dgvspace120\dghorigin1800\dgvorigin1440\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\nolnhtadjtbl \fet0\sectd \linex0\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par }\pard \qc\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\b\fs36\ul\cf13 Using Adium's Core Controllers\par }{\b\fs28\cf13 \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {All of Adium's functionality is provided by the controllers, a set of global classes that abstract most of the internal workings of Adium from the plugins and other parts of the code.  The controllers are accessed with the corresponding method in AIAdium.  Since plugins automatically get the main AIAdium class in a local 'owner' variable, accessing a controller is as simple as:\par \par [owner preferenceController]\par \par To use the controllers, you need to #import "Adium.h".  The available controllers are:\par \par \par }{\b\fs28\cf13 \page AI Login Controller\par }{Manages the Adium user list.\par \par Adium has it's own built in multiple-user support, allowing multiple sets of unique preferences, contact lists, and other information while being logged in under a single OS X user.  The multiple-user support is only successful with the cooperation of all preference and file saving code.  If you are saving a file that is user-specific, it should be saved to the current user directory, as returned by the login controller.  \par \par }{\cf17 Class Methods:\par }{\tab - (NSString *)}{\b userDirectory}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns the directory of the currently logged in user.  All user-specific preferences and data files should be stored at this location.  This method may return a relative path, such as }{"~/Library/Application Support/Adium/Users/Adam/"}{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par }{\b\fs28\cf13 \page AI Account Controller\par }{Keeps track of the user's accounts.\par \par Adium supports multiple accounts.  Every account the user has is represented by a different instance of AIAccount, and the account controller keeps track of, and manages, these.\par \par }{\cf17 Class Methods:\par }\pard \nowidctlpar\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {- (NSNotificationCenter *)}{\b accountNotificationCenter}{\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Returns the shared account controller notification center.  All account-related notifications are/should be broadcast over this center.\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par }{- (NSArray *)}{\b accountArray}{\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Returns an array of the user's accounts.  Each account is represented with an AIAccount instance.\par \pard\plain \li240\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin240\itap0 \f4\lang1033\cgrid {\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {- (AIAccount *)}{\b newAccountAtIndex}{:(int)index\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Create a new account at the specified index in the account array.\par \par Make sure index is valid, you can do this by checking the count of the accountArray.  If index is not valid, the account will be added to the end of the array.\par \par The account will be created silently, with the default settings for service, properties, and any other applicable values.\par \par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {- (void)}{\b deleteAccount}{:(AIAccount *)inAccount\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Delete the specified account.\par \par Do not message the account after it has been deleted.\par \par No confirmaion is presented, so be careful with this.  It\rquote s always a good idea to confirm an account delete with the user.\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par }{- (int)}{\b moveAccount}{:(AIAccount *)account }{\b toIndex}{:(int)destIndex\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Move an account to another place in the account list.  Make sure index is valid (by checking the count of the accountArray).\par \pard\plain \li240\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin240\itap0 \f4\lang1033\cgrid {\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {- (AIAccount *)}{\b switchAccount}{:(AIAccount *)inAccount }{\b toService}{:(id <AIServiceController>)inService\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Switch the account to a different service.\par \par \pard \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 While the majority of account properties will no longer apply to the new service, it is possible to switch an account from one service to another.  This is especially useful when there are multiple ways onto a service (such as with seperate protocols), as it allows quick switching between the available access methods.\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par \tab The available services can be obtained from availableServiceArray\par \par }{- (void)}{\b passwordForAccount}{:(AIAccount *)inAccount }{\b notifyingTarget}{:(id)inTarget }{\b selector}{:(SEL)inSelector\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Retrieve the password for an account.\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par - (void)}{\b forgetPasswordForAccount}{:(AIAccount *)inAccount\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Forget the saved password\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par - (NSArray *)}{\b availableServiceArray}{\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Returns an array of available services\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par - (void)}{\b registerService}{:(id <AIServiceController>)inService\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Registers service code.\par \par This must be done from the init method of a plugin.\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par \par }{\b\fs28\cf13 \page AI Contact Controller\par }{Adium's contact list is made entirely of AIContactObjects.  Groups are represented with AIContactGroups, and handles with AIContactHandles (Both of which are subclasses of AIContactObject).  This means that groups can hold other groups, and in fact, the contact list itself (the "root" of the contact list) is simply an AIContactGroup.\par \par The contact controller keeps track of this list, allows modification of groups and handles, and other contact related servics.\par \par You should never directly manipulate the contact list!  Always use the contact controller's methods to manage the contact list.\par \par }{\cf17 Class methods:\par }{- (NSNotificationCenter *)}{\b contactNotificationCenter}{\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Returns the shared contact controller notification center.\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par }{\cf17 Accounts\par }{- (void)}{\b addAccount}{:(AIAccount<AIAccount_Handles> *)inAccount }{\b toHandle}{:(AIContactHandle *)inHandle\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Add an account as the owner of a contact handle.  When an account is made owner of a handle, it may store the handle on a server-side list, start changing the handle's status, and send and receive content with the handle.  A single handle can be owned by multiple accounts.\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par }{- (void)}{\b removeAccount}{:(AIAccount<AIAccount_Handles> *)inAccount }{\b fromHandle}{:(AIContactHandle *)inHandle\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Remove an account as the other of a handle.  When an account is removed, it will remove the handle from any server-side list, and stop altering the handle's status.\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {\par }{\cf17 Handles}{\par - (AIContactHandle *)}{\b createHandleWithService}{:(NSString *)inService }{\b UID}{:(NSString *)inUID }{\b inGroup}{:(AIContactGroup *)inGroup }{\b forAccount}{:(AIAccount *)inAccount\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Calls createHandleWithService:UID:inGroup:forAccount with a nil group.\par \par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {- (AIContactHandle *)}{\b createHandleWithService}{:(NSString *)inService }{\b UID}{:(NSString *)inUID }{\b inGroup}{:(AIContactGroup *)inGroup }{\b forAccount}{:(AIAccount *)inAccount\par }\pard\plain \s15\li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 \f18\lang1033\cgrid Create a new handle in the specified group.  The handle will be created with the specified service and UID, and an account (or several accounts) may automatically be added as owners to the new handle.  If your service doesn't support groups, pass nil, and Adium will automatically match your handles to existing handles on the list since it doesn't matter where they're placed\par \par if account is nil, Adium will not display the sync dialog, and instead automatically choose ___ ??\par \par Even if you don't support server-side lists, you need to keep track of your list in a preference plist or something.\par \par If the handle already exists in that group, the existing handle is returned, and a new one is not created.\par \pard\plain \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 \f4\lang1033\cgrid {If the handle already exists in the strangers group, it will be moved to the specified group, and returned.\par \par If the handle already exists in another group, User is asked what to do:\par \tab ( ) Change the server side list\tab (existing handle is returned, server-side list must be updated)\par \tab \tab (how is this one going to work?)\par \par \tab ( ) Change the local lists\tab (existing handle is returned, and is moved to the specified group)\par \tab ( ) Add duplicates\tab \tab (existing handle is returned, and is added to the specified group (so it will appear in more than one group))\par \par The prompt is a window, and as more prompts appear they are added to the same window.\par This means that sign on completes... will this cause problems?\par \par The account is added as an owner of the handle, and notified after a sync takes place on what to do... if you're not signing on with an account, pass nil.\par \par \par }{\tab - (void)}{\b deleteHandle}{:(AIContactHandle *)inHandle\par }{Delete the specified handle.  Any owners are removed before deleting.\par }{\cf18 Deleting a handle actually moves it to the strangers group?\par \par }{\cf17 \tab Groups\par }{- (AIContactGroup *)}{\b createGroupNamed}{:(NSString *)inName }{\b inGroup}{:(AIContactGroup *)inGroup\par }{Create a group on the contact list within the specified group.\par \par }{\tab - (void)}{\b deleteGroup}{:(AIContactGroup *)inGroup\par }{Delete an existing group\par \par }{\tab - (void)}{\b renameGroup}{:(AIContactGroup *)inGroup }{\b to}{:(NSString *)newName\par }{Rename a group\par \par }{\cf17 \tab Contact object access\par }{\tab - (AIContactGroup *)}{\b contactList}{\par }{Returns the root contact list group.  This group contains every other group and contact on the list.\par }{\par \tab - (AIContactGroup *)}{\b groupWithName}{:(NSString *)inName\par }{Find and return the group with the specified name\par \par }{- (AIContactHandle *)}{\b handleWithService}{:(NSString *)inService }{\b UID}{:(NSString *)inUID\par }{Find and return the handle with the specified service and UID\par }{\par \tab If the handle does not exist, it will be created in the '__strangers' group.\par \par \par - (NSMutableArray *)}{\b allContactsInGroup}{:(AIContactGroup *)inGroup }{\b subgroups}{:(BOOL)subGroups\par }{Return all the contacts in a group, and (optionally) all the subgroups it contains\par \par }{\cf17 \tab Handle observers / status\par }{- (void)}{\b handleStatusChanged}{:(AIContactHandle *)inHandle }{\b modifiedStatusKeys}{:(NSArray *)InModifiedKeys\par }{Let everyone know a handles status has changed (call this method after making changes to a handle's status dict)\par \par }{\tab - (void)}{\b registerHandleObserver}{:(id <AIHandleObserver>)inObserver\par }{Register a handle observer (see docs on handle observers...)\par \par }{\cf17 \tab Content\par }{\par - (}{\cf19 void}{)}{\b addIncomingContentObject}{:(NSObject <AIContentObject> *)inObject }{\b toHandle}{:(AIContactHandle *)inHandle\par }{Add a content object to a handle\par \par }{- (}{\cf19 void}{)}{\b sendContentObject}{:(NSObject <AIContentObject> *)inObject }{\b toHandle}{:(AIContactHandle *)inHandle\par }{Send a content object to a handle\par \par }{\cf17 \tab Contact Info\par }{\tab - (void)}{\b showInfoForContact}{:(AIContactHandle *)inContact\par }{Show the info window for the specified contact\par \par }{\tab - (void)}{\b addContactInfoView}{:(AIContactInfoView *)inView\par }{Add a contact info view\par \par }{\cf17 \tab Misc\par }{\tab - (void)}{\b delayContactListUpdatesFor}{:(int)seconds\par }{Delay updating of the contact list for a set period of time.  (Call this before making massive changes to the contact list)\par \par \par }{\b\fs28\cf13 \page AI Interface Controller\par }{Manages Adium's interface\par \par The interface controller handles general interface needs, such as requesting a 'message window' for a handle.  The active interface can take any form.\par \par }{\cf17 Public Methods:\par }{\tab - (NSNotificationCenter *)}{\b interfaceNotificationCenter}{;\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns the shared interface controller notification center.\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab \tab \par }{\tab - (void)}{\b registerContactListView}{:(id <AIContactListViewController>)inView\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Register a contact list view\par \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab - (NSView *)}{\b contactListView}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Return the currently active contact list view}{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \tab - (void)}{\b registerMessageView}{:(id <AIMessageViewController>)inView\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Register a message view\par }{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab - (NSView *)}{\b messageViewForHandle}{:(AIContactHandle *)inHandle\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Return the currently active message view}{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par }{\b\fs28\cf13 \page AI Preference Controller\par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {- (void)}{\b registerDefaults}{:(NSDictionary *)defaultDict }{\b forGroup}{:(NSString *)groupName\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Register a set of default values}{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {- (void)}{\b setPreference}{:(id)value }{\b forKey}{:(NSString *)inKey }{\b group}{:(NSString *)inGroup\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Set a preference}{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \tab - (NSDictionary *)}{\b preferencesForGroup}{:(NSString *)groupName\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Retrieve a preference group.\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {- (id)}{\b preferenceForKey}{:(NSString *)inKey }{\b group}{:(NSString *)groupName }{\b handle}{:(AIContactHandle *)handle\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns a contact specific preference}{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \tab - (IBAction)}{\b showPreferenceWindow}{:(id)sender\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Open the preferences window\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \tab - (void)}{\b addPreferenceView}{:(AIPreferenceView *)inView\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Add a custom preference veiw}{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par }{\b\fs28\cf13 \page AI Menu Controller\par }{\tab - (void)}{\b addMenuItem}{:(NSMenuItem *)newItem }{\b toLocation}{:(MENU_LOCATION)location\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Add a menu item\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \tab - (void)}{\b removeMenuItem}{:(NSMenuItem *)targetItem;\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Remove a menu item\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\b\fs28\cf13 AI Sound Controller\par }{\tab + (void)}{\b playSoundNamed}{:(NSString *)inName\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Play a sound\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par }{\b\fs28\cf13 Notifications\par }{\cf17 AccountController:}{\b\cf1 \par }\pard \li360\nowidctlpar\tx720\tx1080\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin360\itap0 {\b\cf1 Account_ListChanged\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab \tab The account list's structure has changed.  Posted when an account is added, moved, or deleted.\par }{\b\cf1 \par }\pard \li360\nowidctlpar\tx720\tx1080\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin360\itap0 {\b\cf1 Account_PropertiesChanged\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab \tab The properties of an account have changed.\par \tab \tab (object)\tab - Modified account \par }\pard \li360\nowidctlpar\tx720\tx1080\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin360\itap0 {\b\cf1 \par Account_StatusChanged\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab \tab The status of an account has changed\par \tab \tab (object)\tab - Modified account\par }\pard \li360\nowidctlpar\tx720\tx1080\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin360\itap0 {\b\cf1 \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\cf17 ContactController:}{\b \par }\pard \li360\nowidctlpar\tx720\tx1080\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin360\itap0 {\b\cf1 Contact_ObjectChanged\par }{\tab \tab An object on the contact list has changed.\par \tab \tab (object)\tab - The contact object that changed (AIContactObject)\par }{\b\cf1 \par Contact_ListChanged\par }{\tab \tab A large number of objects on the contact list have changed, and a refresh of the entire list is required.\par }{\cf17 \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\cf17 InterfaceController:}{\b \par }\pard \li360\nowidctlpar\tx720\tx1080\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin360\itap0 {\b\cf1 Interface_ContactSelectionChanged\par Interface_InitiateMessage\par }{\tab \tab Instructs the interface to open a new 'message window' with the specified contents\par \tab \tab @"To" \tab - The destination (AIContactHandle)\par \tab \tab @"From" \tab - The source (AIAccount)\par \tab \tab @"Content" \tab - The initial outgoing content (This is only guaranteed to be used if a valid 'To' and 'From' are specified)\par }{\b\cf1 Interface_CloseMessage\par }{\tab \tab Instructs the interface to close an existing message window\par \tab \tab @"Handle" \tab - The handle who's message should be closed\par }{\b\cf1 Interface_SendEnteredMessage\par }{\tab \tab Instructs the interface to send the entered message\par \tab \tab (object)\tab - Handle who's message to send (AIContactHandle)\par }{\b\cf1 Interface_WillSendEnteredMessage\par }{\b \tab \tab }{Sent by interface before sending\par \tab \tab (object)\tab - Handle who's message is being sent (AIContactHandle)\par }{\b\cf1 Interface_DidSendEnteredMessage\par }{\b \tab \tab }{Sent by interface after sending\par \tab \tab (object)\tab - Handle who's message was sent (AIContactHandle)\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\cf17 ContentController:}{\b\cf1 \par }\pard \li360\nowidctlpar\tx720\tx1080\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin360\itap0 {\b\cf1 Content_ContentObjectAdded\par Content_WillSendContent\par Content_DidSendContent\par Content_WillReceiveContent\par Content_DidReceiveContent\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\b\fs28\cf13 \par \par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {\par \tab }{\b Interface_InitiateMessage}{\par \tab }{\b Interface_CloseMessage\par }{\tab }{\b Interface_SendEnteredMessage}{\par }{\tab }{\b Interface_WillSendEnteredMessage\par }{\tab }{\b Interface_DidSendEnteredMessage\par }{\tab }{\b Contact_ContentObjectAdded}{\par \tab \tab A content object has been added to a contact\par \tab \tab (object)\tab - The contact with new content (AIContactObject)\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\b\fs28\cf13 \par \par \par \par }{\par }\pard \nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\faauto\rin0\lin0\itap0 {\cf1 - create a new target for your plugin in Adium\par - create a bundle\par - set the bundle extension .AdiumPlugin .\par - check-include the necessary adium frameworks and system frameworks into the plugin's target\par - build the plugin.\par - Drag the built plugin from /build into the adium project, (into the plugins folder).\par - Check-include the newly dragged-in plugin into the adium target\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\cf1 - modify the build phases of the adium target so the plugin is put in the correct location. Drag it from bundle resources into the copy-files (plugins) area.}{\par \par \par \par \par \par \par }\pard \qc\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\b\fs36\ul\cf13 Using the Adium Framework Classes\par }{\b\fs28\ul\cf13 \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\b\fs28\cf13 AIPlugin\par }{Serves as a base for developing plugins.  You will never use AIPlugin unless you are creating a plugin (See documentation below)}{\b\fs28\ul\cf13 \par }{\par }{\b\fs28\cf13 AIService\par }{Services are used for protocol/service plugins.  You will never use AIService unless you are creating a Service Plugin (See documentation below)\par }{\cf18 That's a lie - they need to get the service types from them\par }\pard \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 {- (AIServiceType *)}{\b accountServiceType}{\par - (AIServiceType *)}{\b handleServiceType}{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par }{\b\fs28\cf13 AIAccount\par }{The AIAccount class represents an individual account on the user's account list.  The base AIAccount class provides no practical functionality, so almost all of the AIAccounts you deal with will be subclasses.  You will almost never need to talk directly with an AIAccount.  For an indepth look on creating account code, see below.\par \par To simplify the differences and complications of integrating multiple types of messaging services, Adium allows accounts to specify which sets of methods they wish to respond to using protocols.  Because of this, you can never assume an Account with respond to a particular protocol (with the exception of AIAccount_Required), and must always check for conformance before invoking an account method.\par \par }{\tab - (NSMutableDictionary *)}{\b properties}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns a dictionary of properties specific to this account.  The contents of this dictionary will vary depending on the account plugin in use, but it will usualy contain some form of account identifier and other account information.\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\tab - (AIService *)}{\b service}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns the AIService instance that this account was created from.\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\cf17 Subclasses may respond to the following protocols:\par }{\tab }{\cf13 AIAccount_Required}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {These methods are required and guaranteed available for all accounts.\par \par }{- (NSString *)}{\b accountID}{\par }{\tab Return a unique ID for this account type and username\par \par }{- (NSString *)}{\b accountDescription}{\par }{\tab Return a readable description of this account's username\par \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab }{\cf13 AIAccount_Content}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {You should never call any of the content protocol  methods directly.  Send content using the Contact Controller\par \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab }{\cf13 AIAccount_Handles}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {You should never call any of the handle protocol  methods directly.  Modify handles using the Contact Controller\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab \tab \par }{\cf13 \tab AIAccount_GroupedHandles\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {You should never call any of the grouped handles protocol methods directly.  Modify groups using the Contact Controller\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \tab }{\cf13 AIAccount_Status}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Accounts that comply to this protocol have pre-defined states of availability.  An account that is always available (and doesn't conform to the concept of connected / disconnected) may not implement this protocol.\par \par }{- (ACCOUNT_STATUS)}{\b status}{\par }{\tab Return the current connection status of this account.  Valid values are:\par \tab STATUS_NA\tab \tab - The status is not applicable for some reason\par \tab STATUS_OFFLINE\tab - The account is not connected\par \tab STATUS_CONNECTING\tab - The account is connecting\par \tab STATUS_ONLINE\tab \tab - The account is connected\par \tab STATUS_DISCONNECTING\tab - The account is disconnecting\par \par }{- (void)}{\b connect}{\par }{\tab Initiate a connection to the account's server\par \par }{- (void)}{\b disconnect}{\par }{\tab Close the connection with the account's server\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par }{\b\fs28\cf13 AIServiceType\par }{AIServiceType is a container class that can be used to describe any 'service' that requires an identifier, description, and image.  Adium uses this class to describe service types and handle types.\par \par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {+ (id)}{\b serviceTypeWithIdentifier}{:(NSString *)inIdentifier }{\b description}{:(NSString *)inDescription }{\b image}{:(NSImage *)inImage\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns a new service type with the specified identifier, description, and image.  Identifier should be a string unique to this service type that briefly describes it (such as "AIM"), description should be a human-readable description of the service (such as "AOL, AIM, or iChat"), and image should be an image representeation of the service.\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \tab - (NSString *)}{\b identifier}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns the identifier\par \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab - (NSString *)}{\b description}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns the description\par \par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\tab - (NSImage *)}{\b image}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns the image\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par }{\b\fs28\cf13 AIMessageSendingTextView\par }{The message sending text view is a handy subclass of an AISendingTextView that automatically handles:\par \tab - Configuring the 'send' keys based on the user's preferences\par \tab - Posting a send message notification when a send key is pressed\par \tab - Clearing the text after the message is sent\par \par Nothing too special, but it does save a bit of coding, since almost every interface will want a sending text view that behaves this way.  Before using the text view, call the set owner method, passing the shared instance of AIAdium, and the handle the text view should represent.\par \par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {- (void)}{\b setOwner}{:(AIAdium *)inOwner }{\b handle}{:(AIContactHandle *)inHandle\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Sets the owner and represented handle of this view.\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par }\pard \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 {\b\fs28\cf13 AIPreferenceViewController\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {AIPreferenceViewControllers are used for adding preferences to Adium.  You will never use them unless you are adding preferences (See documentation below)\par \par \par }\pard \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 {\b\fs28\cf13 AIContactInfoViewController\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {AIContactInfoViewControllers are used for adding contact info panels to Adium.  You will only use them to add an info panel (See documentation below)\par \par \par }{\b\fs28\cf13 AIContactObject\par }{Every object on Adium's contact list is a contact object.  A contact object can be a handle, a group, or something else.  Every contact object you use with will be a subclass, and most of the interaction with contact objects will occur using methods in the Contact Controller.\par \par }{\tab - (AIMutableOwnerArray *)}{\b displayArrayForKey}{:(NSString *)inKey\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns a mutable owner array for the specified display key.  Mutable owner arrays allow more than one 'owner' to control the display of this object without conflicts.  The common display arrays are:\par @"Display Name"\tab - Local string to override the standard display name (Equivelant to an alias in Adium 1.x)\par @"Visible"\tab - Visibility of the object on the contact list\par @"Text Color"\tab - Text color of the name\par @"Left View"\tab - Left aligned view (Displayed to the left of the object's name)\par @"Right View"\tab - Right aligned view (Displayed to the right of the object's name)\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\tab - (NSString *)}{\b displayName}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns the contact object's display name.  When representing the object to the user, you should use the display name over the UID and other identifiers.\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\tab - (NSComparisonResult)}{\b compare}{:(AIContactObject *)object\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Compares this contact object to another\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\tab - (BOOL)}{\b belongsToAccount}{:(AIAccount *)inAccount;\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Returns YES if this object belongs to the account (and the Account is an owner of this object).\par }{\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\b\fs28\cf13 AIContactHandle\par }{Contact Handles are contact objects with some additional handle specific methods\par \par }{\tab - (NSString *)}{\b service}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Return the service of this handle\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\tab - (NSString *)}{\b UID}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Return the unique identifier of the handle\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\tab - (AIMutableOwnerArray *)}{\b statusArrayForKey}{:(NSString *)inKey\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Return a mutable owner array for the specified status key.  Mutable owner arrays allow more than one 'owner' to control the status of this handle without conflicts.  The common status arrays are:\par @"Display Name"\tab - (NSString )Server string to override the standard display name (A friendlier representation of the server's UID)\par @"Online"\tab - (BOOL) connected or not\par @"Warning"\tab - (int) Warning/Blacklist percentage\par @"Idle"\tab - (double) seconds the contact has been idle\par @"Signon Date"\tab - (NSDate) date the contact connected\par @"Away"\tab - (BOOL) flagged as away or not\par @"Client"\tab - (NSString) description of the contact's client\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par }{\tab - (NSArray *)}{\b contentObjectArray}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Return the array of content objects for this handle\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par }{\b\fs28\cf13 AIContactGroup\par }{Contact Groups are contact objects with some additional group specific methods\par \par \tab - (unsigned)count;\par \tab - (id)objectAtIndex:(unsigned)index;\par \tab - (unsigned)sortedCount;\par \tab - (id)sortedObjectAtIndex:(unsigned)index;\par \tab - (void)sortGroupAndSubGroups:(BOOL)subGroups;\par \tab ??\par \par }{\b\fs28\cf13 AIContentObject\par }{\tab \par }{\b\fs28\cf13 AIContentMessage\par \par \par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {+ (id)}{\b messageTextWithSource}{:(id)inSource }{\b destination}{:(id)inDest }{\b date}{:(NSDate *)inDate }{\b message}{:(NSAttributedString *)inMessage\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Create a content message\par }\pard \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 {\par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {- (NSString *)}{\b type}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Return the type ID of this content\par \par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {- (NSAttributedString *)}{\b message}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {The attributed message contents\par }\pard \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 {\par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {- (id)}{\b source}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Message source (may return a contact handle, or an account)\par \par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {- (id)}{\b destination}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Message destination (may return a contact handle, or an account(\par }\pard \fi-480\li480\nowidctlpar\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\tx10560\tx11520\tx12480\tx13440\tx14400\tx15360\tx16320\tx17280\tx18240\tx19200\tx20160\tx21120\tx22080\tx23040\tx24000\tx24960\tx25920\tx26880\tx27840\tx28800\tx29760\tx30720\tx31680\faauto\rin0\lin480\itap0 {\par }\pard \li360\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin360\itap0 {- (NSDate *)}{\b date}{\par }\pard \li720\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin720\itap0 {Return the date and time this message was sent\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par \par \par \par \par }\pard \qc\nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\b\fs36\ul\cf13 Creating Adium Plugins\par }\pard \nowidctlpar\tx360\tx720\tx1080\tx1440\tx3060\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\faauto\rin0\lin0\itap0 {\par \par \par \par \par account may be told to do things with handles they don't own.  If your account can't message strangers, you need to be aware of this and take precautions\par \par \par \par \par Creating a Plug-in  (Adding functionality to Adium)\par --------------------------------------------------------------------\par All Plugins should be a subclass of AIPlugin.\par \par The only method a plugin is required to implement is:\par - (void)installPlugin\par \par When your plugin is loaded, the install plugin is called.  This is where the plugin should install any hooks it requires (filters, preferences, buttons, menu items).\par \par The plugin inherits the variable 'owner', which contains a reference to AIAdium, Adium's main class.\par \par Plugins perform their magic using the built in controllers.\par \par \par If you use any of the following, import:\par Core Controllers: \tab \tab import "AIAdium.h"\par AIUtilities.Framework: \tab import <AIUtilities/AIUtilities.h>\par Adium.Framework:\tab \tab import <Adium/Adium.h>\par \par \par \par How Adium's contact list works\par ------------------------------------------\par \par \par Every contact object has a list of owners.  Owners are accounts that 'Control' the contact object.  For instance, a handle will have an account as its owner if it is on that account's contact list.  Contact objects can have more than one owner (and they will if they are on the contact list of more than one active account).  To add or remove owners, use the methods in the Contact Controller, do not message the contact object directly.\par \par Every contact object also knows the group that contains it.  These are used internally by the \par \par \par \par /*\par     All message objects retain their origional content when filtered (incase anyone wants/needs it)\par \par     (Laura sends IM)\par     Account:\par         creates a message object\par         calls a contactController method to add the object\par         \par         ContactController:\par             calls all registered incoming filters\par             adds the object to the handle\par             notifies everyone that an object was added\par     \par     (I send IM)\par     Interface Code:\par         creates a message object\par         calls a contact controller method to send the object\par         \par         ContactController\par             calls all registered outgoing filters\par             calls account code to send the message\par             \par             Account:\par                 sends the message to laura\par             \par             adds the object to the handle\par             notifies everyone that an object was added\par \par */\par \par //The message object system is used to *send content between users*.  It may be simple text content, or images and other files,\par \par /*\par     Creating code with preferences\par \par     Init:\par \tab [preferenceController addPreferenceView:myView];\par         [preferenceController registerDefaults:myDefaultDict forGroup:@"My Preference File"]\par         myPrefDict = [preferenceController preferencesForGroup:@"My Preference File"];\par         \par     Using a preference:\par         textColor = [myPrefDict intForKey:@"Days in week"];\par         \par     Setting a preference:\par         [preferenceController setPreference:7 forKey:@"Days in week" group:@"My Preference File"];\par \par */\par \par \par \par }}