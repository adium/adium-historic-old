#
# old_revision [a8a55d40e5ffee2d20e645e9d18bb8ca932784cc]
#
# add_file "libpurple/plugins/ssl/ssl-openssl.c"
#  content [735e50dabc8c4a0b2d211296666389c6f3505d8a]
# 
# patch "configure.ac"
#  from [2790c7c1a6e32f43b636722d58c0a031d810ba5f]
#    to [252da5a9029f8902a8ecb2d204caa1fb689b278e]
# 
# patch "libpurple/plugins/ssl/Makefile.am"
#  from [a30ff6771787dcd1be55fbfdff83f7d5f05e739a]
#    to [0a54d65db0ee986f65573a468f1038ccd6f7a099]
#
============================================================
--- libpurple/plugins/ssl/ssl-openssl.c	735e50dabc8c4a0b2d211296666389c6f3505d8a
+++ libpurple/plugins/ssl/ssl-openssl.c	735e50dabc8c4a0b2d211296666389c6f3505d8a
@@ -0,0 +1,369 @@
+/*	$OpenBSD: ssl-openssl.c,v 1.10 2006/10/31 19:32:51 brad Exp $	*/
+
+/*
+ * OpenSSL SSL-plugin for purple
+ *
+ * Copyright (c) 2004 Brad Smith <brad@comstyle.com>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include "internal.h"
+#include "debug.h"
+#include "plugin.h"
+#include "sslconn.h"
+#include "version.h"
+
+#define SSL_OPENSSL_PLUGIN_ID "ssl-openssl"
+
+#ifdef HAVE_OPENSSL
+
+#include <openssl/ssl.h>
+#include <openssl/err.h>
+
+typedef struct
+{
+	SSL	*ssl;
+	SSL_CTX	*ssl_ctx;
+	guint	handshake_handler;
+} PurpleSslOpensslData;
+
+#define PURPLE_SSL_OPENSSL_DATA(gsc) ((PurpleSslOpensslData *)gsc->private_data)
+
+/*
+ * ssl_openssl_init_openssl
+ *
+ * load the error strings we might want to use eventually, and init the
+ * openssl library
+ */
+static void
+ssl_openssl_init_openssl(void)
+{
+	/*
+	 * load the error number to string strings so that we can make sense
+	 * of ssl issues while debugging this code
+	 */
+	SSL_load_error_strings();
+
+	/*
+	 * we need to initialise the openssl library
+	 * we do not seed the random number generator, although we probably
+	 * should in purple-win32.
+	 */
+	SSL_library_init();
+}
+
+/*
+ * ssl_openssl_init
+ */
+static gboolean
+ssl_openssl_init(void)
+{
+	return (TRUE);
+}
+
+/*
+ * ssl_openssl_uninit
+ *
+ * couldn't find anything to match the call to SSL_library_init in the man
+ * pages, i wonder if there actually is anything we need to call
+ */
+static void
+ssl_openssl_uninit(void)
+{
+	ERR_free_strings();
+}
+
+/*
+ * ssl_openssl_handshake_cb
+ */
+static void
+ssl_openssl_handshake_cb(gpointer data, gint source, PurpleInputCondition cond)
+{
+	PurpleSslConnection *gsc = (PurpleSslConnection *)data;
+	PurpleSslOpensslData *openssl_data = PURPLE_SSL_OPENSSL_DATA(gsc);
+	int ret, ret2;
+
+	purple_debug_info("openssl", "Connecting\n");
+
+	/*
+	 * do the negotiation that sets up the SSL connection between
+	 * here and there.
+	 */
+	ret = SSL_connect(openssl_data->ssl);
+	if (ret <= 0) {
+		purple_debug_info("openssl", "SSL_get_error\n");
+		ret2 = SSL_get_error(openssl_data->ssl, ret);
+
+		if (ret2 == SSL_ERROR_WANT_READ || ret2 == SSL_ERROR_WANT_WRITE)
+			return;
+
+		purple_debug_error("openssl", "SSL_connect failed: %s\n", ERR_error_string(ret2, NULL));
+
+		if (gsc->error_cb != NULL)
+			gsc->error_cb(gsc, PURPLE_SSL_HANDSHAKE_FAILED,
+				gsc->connect_cb_data);
+
+		purple_ssl_close(gsc);
+		return;
+	}
+
+	purple_input_remove(openssl_data->handshake_handler);
+	openssl_data->handshake_handler = 0;
+
+	purple_debug_info("openssl", "SSL_connect complete\n");
+
+	/* SSL connected now */
+	gsc->connect_cb(gsc->connect_cb_data, gsc, cond);
+}
+
+/*
+ * ssl_openssl_connect
+ *
+ * given a socket, put an openssl connection around it.
+ */
+static void
+ssl_openssl_connect(PurpleSslConnection *gsc)
+{
+	PurpleSslOpensslData *openssl_data;
+
+	/*
+	 * allocate some memory to store variables for the openssl connection.
+	 * the memory comes zero'd from g_new0 so we don't need to null the
+	 * pointers held in this struct.
+	 */
+	openssl_data = g_new0(PurpleSslOpensslData, 1);
+	gsc->private_data = openssl_data;
+
+	/*
+	 * allocate a new SSL_CTX object
+	*/
+	openssl_data->ssl_ctx = SSL_CTX_new(SSLv23_client_method());
+	if (openssl_data->ssl_ctx == NULL) {
+		purple_debug_error("openssl", "SSL_CTX_new failed\n");
+		if (gsc->error_cb != NULL)
+			gsc->error_cb(gsc, PURPLE_SSL_HANDSHAKE_FAILED,
+				gsc->connect_cb_data);
+
+		purple_ssl_close(gsc);
+		return;
+	}
+
+	/*
+	 * allocate a new SSL object
+	 */
+	openssl_data->ssl = SSL_new(openssl_data->ssl_ctx);
+	if (openssl_data->ssl == NULL) {
+		purple_debug_error("openssl", "SSL_new failed\n");
+		if (gsc->error_cb != NULL)
+			gsc->error_cb(gsc, PURPLE_SSL_HANDSHAKE_FAILED,
+				gsc->connect_cb_data);
+
+		purple_ssl_close(gsc);
+		return;
+	}
+
+	/*
+	 * now we associate the file descriptor we have with the SSL connection
+	 */
+	if (SSL_set_fd(openssl_data->ssl, gsc->fd) == 0) {
+		purple_debug_error("openssl", "SSL_set_fd failed\n");
+		if (gsc->error_cb != NULL)
+			gsc->error_cb(gsc, PURPLE_SSL_HANDSHAKE_FAILED,
+				gsc->connect_cb_data);
+
+		purple_ssl_close(gsc);
+		return;
+	}
+
+	openssl_data->handshake_handler = purple_input_add(gsc->fd,
+		PURPLE_INPUT_READ, ssl_openssl_handshake_cb, gsc);
+
+	ssl_openssl_handshake_cb(gsc, gsc->fd, PURPLE_INPUT_READ);
+}
+
+static void
+ssl_openssl_close(PurpleSslConnection *gsc)
+{
+	PurpleSslOpensslData *openssl_data = PURPLE_SSL_OPENSSL_DATA(gsc);
+	int i;
+
+	if (openssl_data == NULL)
+		return;
+
+	if (openssl_data->handshake_handler)
+		purple_input_remove(openssl_data->handshake_handler);
+
+	if (openssl_data->ssl != NULL) {
+		i = SSL_shutdown(openssl_data->ssl);
+		if (i == 0)
+			SSL_shutdown(openssl_data->ssl);
+		SSL_free(openssl_data->ssl);
+	}
+
+	if (openssl_data->ssl_ctx != NULL)
+		SSL_CTX_free(openssl_data->ssl_ctx);
+
+	g_free(openssl_data);
+	gsc->private_data = NULL;
+}
+
+static size_t
+ssl_openssl_read(PurpleSslConnection *gsc, void *data, size_t len)
+{
+	PurpleSslOpensslData *openssl_data = PURPLE_SSL_OPENSSL_DATA(gsc);
+	ssize_t s;
+	int ret;
+
+	s = SSL_read(openssl_data->ssl, data, len);
+	if (s <= 0) {
+		ret = SSL_get_error(openssl_data->ssl, s);
+
+		if (ret == SSL_ERROR_WANT_READ || ret == SSL_ERROR_WANT_WRITE) {
+			errno = EAGAIN;
+			return (-1);
+		}
+
+		purple_debug_error("openssl", "receive failed: %s\n", ERR_error_string(ret, NULL));
+
+		if (ret == SSL_ERROR_ZERO_RETURN) {
+			s = 0;
+			errno = ECONNRESET;
+			
+		} else {
+			s = -1;
+			/*
+			 * TODO: Set errno to something more appropriate.  Or even
+			 *       better: allow ssl plugins to keep track of their
+			 *       own error message, then add a new ssl_ops function
+			 *       that returns the error message.
+			 */
+			errno = EIO;
+		}
+	}
+
+	return (s);
+}
+
+static size_t
+ssl_openssl_write(PurpleSslConnection *gsc, const void *data, size_t len)
+{
+	PurpleSslOpensslData *openssl_data = PURPLE_SSL_OPENSSL_DATA(gsc);
+	ssize_t s = 0;
+	int ret;
+
+	if (openssl_data != NULL)
+		s = SSL_write(openssl_data->ssl, data, len);
+
+	if (s <= 0) {
+		ret = SSL_get_error(openssl_data->ssl, s);
+
+		if (ret == SSL_ERROR_WANT_READ || ret == SSL_ERROR_WANT_WRITE) {
+			errno = EAGAIN;
+			return (-1);
+		}
+
+		purple_debug_error("openssl", "send failed: %s\n", ERR_error_string(ret, NULL));
+
+		if (ret == SSL_ERROR_ZERO_RETURN) {
+			s = 0;
+			errno = ECONNRESET;
+
+		} else {
+			s = -1;
+			/*
+			 * TODO: Set errno to something more appropriate.  Or even
+			 *       better: allow ssl plugins to keep track of their
+			 *       own error message, then add a new ssl_ops function
+			 *       that returns the error message.
+			 */
+			errno = EIO;
+		}
+	}
+
+	return (s);
+}
+
+static PurpleSslOps ssl_ops = {
+	ssl_openssl_init,
+	ssl_openssl_uninit,
+	ssl_openssl_connect,
+	ssl_openssl_close,
+	ssl_openssl_read,
+	ssl_openssl_write
+};
+
+#endif /* HAVE_OPENSSL */
+
+static gboolean
+plugin_load(PurplePlugin *plugin)
+{
+#ifdef HAVE_OPENSSL
+	if (!purple_ssl_get_ops())
+		purple_ssl_set_ops(&ssl_ops);
+
+	/* Init OpenSSL now so others can use it even if sslconn never does */
+	ssl_openssl_init_openssl();
+
+	return (TRUE);
+#else
+	return (FALSE);
+#endif
+}
+
+static gboolean
+plugin_unload(PurplePlugin *plugin)
+{
+#ifdef HAVE_OPENSSL
+	if (purple_ssl_get_ops() == &ssl_ops)
+		purple_ssl_set_ops(NULL);
+#endif
+
+	return (TRUE);
+}
+
+static PurplePluginInfo info = {
+	PURPLE_PLUGIN_MAGIC,
+	PURPLE_MAJOR_VERSION,
+	PURPLE_MINOR_VERSION,
+	PURPLE_PLUGIN_STANDARD,				/* type */
+	NULL,						/* ui_requirement */
+	PURPLE_PLUGIN_FLAG_INVISIBLE,			/* flags */
+	NULL,						/* dependencies */
+	PURPLE_PRIORITY_DEFAULT,				/* priority */
+
+	SSL_OPENSSL_PLUGIN_ID,				/* id */
+	N_("OpenSSL"),					/* name */
+	VERSION,					/* version */
+
+	N_("Provides SSL support through OpenSSL."),	/* description */
+	N_("Provides SSL support through OpenSSL."),
+	"OpenSSL",
+	NULL,						/* homepage */
+
+	plugin_load,					/* load */
+	plugin_unload,					/* unload */
+	NULL,						/* destroy */
+
+	NULL,						/* ui_info */
+	NULL,						/* extra_info */
+	NULL,						/* prefs_info */
+	NULL						/* actions */
+};
+
+static void
+init_plugin(PurplePlugin *plugin)
+{
+}
+
+PURPLE_INIT_PLUGIN(ssl_openssl, init_plugin, info)
============================================================
--- configure.ac	2790c7c1a6e32f43b636722d58c0a031d810ba5f
+++ configure.ac	252da5a9029f8902a8ecb2d204caa1fb689b278e
@@ -1479,8 +1479,13 @@ AC_ARG_ENABLE(nss,
 	[enable_nss="$enableval"],
 	[enable_nss="yes"])
 
-msg_ssl="None. MSN, Novell Groupwise and Google Talk will not work without GnuTLS or NSS. OpenSSL is NOT usable!"
+AC_ARG_ENABLE(openssl,
+	[  --enable-openssl=[yes,no,static]    attempt to use OpenSSL for SSL support [default=yes]],
+	[enable_openssl="$enableval"],
+	[enable_openssl="yes"])
 
+msg_ssl="None. MSN, Novell Groupwise and Google Talk will not work without GnuTLS, OpenSSL or NSS."
+
 dnl #
 dnl # Check for GnuTLS if it's specified.
 dnl #
@@ -1409,7 +1414,93 @@ AM_CONDITIONAL(USE_GNUTLS, test "x$enabl
 
 AM_CONDITIONAL(USE_GNUTLS, test "x$enable_gnutls" = "xyes")
 
+dnl #
+dnl # Check for OpenSSL if it's specified.
+dnl #
+if test "x$enable_openssl" != "xno"; then
+	enable_openssl="no"
+	prefix=`eval echo $prefix`
 
+	AC_ARG_WITH(openssl-includes,
+		[  --with-openssl-includes=PREFIX   location of OpenSSL includes.],
+		[ with_openssl_includes="$withval" ],
+		[ with_openssl_includes="$prefix/include" ])
+
+	have_openssl_includes="no"
+
+	if test "x$with_openssl_includes" != "xno"; then
+		CPPFLAGS_save="$CPPFLAGS"
+
+		AC_MSG_CHECKING(for OpenSSL includes)
+		AC_MSG_RESULT("")
+
+		CPPFLAGS="$CPPFLAGS -I$with_openssl_includes"
+		AC_CHECK_HEADERS(openssl/ssl.h, [ openssl_includes="yes" ])
+		CPPFLAGS="$CPPFLAGS_save"
+
+		if test "x$openssl_includes" != "xno" -a \
+		        "x$openssl_includes" != "x"; then
+			have_openssl_includes="yes"
+
+			if test "x$with_openssl_includes" != "xNONE/include"; then
+				OPENSSL_CFLAGS="-I$with_openssl_includes"
+			fi
+		else
+			OPENSSL_CFLAGS=""
+		fi
+	else
+		AC_MSG_CHECKING(for OpenSSL includes)
+		AC_MSG_RESULT(no)
+	fi
+
+	AC_ARG_WITH(openssl-libs,
+		[AC_HELP_STRING([--with-openssl-libs=PREFIX], [location of OpenSSL libraries.])],
+		[ with_openssl_libs="$withval" ])
+
+	if test "x$with_openssl_libs"     != "xno" -a \
+	        "x$have_openssl_includes" != "xno"; then
+
+		LIBS_save="$LIBS"
+
+		case $with_openssl_libs in
+			""|-L*) ;;
+			*) with_openssl_libs="-L$with_openssl_libs" ;;
+		esac
+
+		AC_CACHE_CHECK([for OpenSSL libraries], openssl_libs,
+		[
+			LIBS="$LIBS $with_openssl_libs -lssl"
+			AC_TRY_LINK_FUNC(SSL_library_init, openssl_libs="yes", openssl_libs="no")
+			LIBS="$LIBS_save"
+		])
+
+		if test "x$openssl_libs" != "xno"; then
+			AC_DEFINE(HAVE_OPENSSL, 1, [Define if you have OpenSSL])
+			AC_DEFINE(HAVE_SSL)
+			msg_gnutls="OpenSSL"
+			OPENSSL_LIBS="$with_openssl_libs -lssl"
+
+			enable_openssl="yes"
+		else
+			OPENSSL_CFLAGS=""
+			OPENSSL_LIBS=""
+		fi
+	else
+		AC_MSG_CHECKING(for OpenSSL libraries)
+		AC_MSG_RESULT(no)
+	fi
+else
+	OPENSSL_CFLAGS=""
+	OPENSSL_LIBS=""
+fi
+
+AC_SUBST(OPENSSL_CFLAGS)
+AC_SUBST(OPENSSL_LIBS)
+
+AM_CONDITIONAL(USE_OPENSSL, test "x$enable_openssl" = "xyes")
+
+
+
 dnl #
 dnl # Check for NSS if it's specified, or if GnuTLS checks failed.
 dnl #
@@ -1687,6 +1778,10 @@ fi
 	msg_ssl=$msg_gnutls
 fi
 
+if test "x$msg_openssl" != "x"; then
+    msg_ssl="$msg_ssl and $msg_openssl"
+fi
+
 dnl #######################################################################
 dnl # Check for Tcl
 dnl #######################################################################
============================================================
--- libpurple/plugins/ssl/Makefile.am	a30ff6771787dcd1be55fbfdff83f7d5f05e739a
+++ libpurple/plugins/ssl/Makefile.am	0a54d65db0ee986f65573a468f1038ccd6f7a099
@@ -1,26 +1,30 @@ plugindir = $(libdir)/purple-$(PURPLE_MA
 EXTRA_DIST = \
 		Makefile.mingw
 
 plugindir = $(libdir)/purple-$(PURPLE_MAJOR_VERSION)
 
-ssl_la_LDFLAGS        = -module -avoid-version
-ssl_gnutls_la_LDFLAGS = -module -avoid-version
-ssl_nss_la_LDFLAGS    = -module -avoid-version
+ssl_la_LDFLAGS         = -module -avoid-version
+ssl_gnutls_la_LDFLAGS  = -module -avoid-version
+ssl_nss_la_LDFLAGS     = -module -avoid-version
+ssl_openssl_la_LDFLAGS = -module -avoid-version
 
 if PLUGINS
 
 plugin_LTLIBRARIES = \
 	ssl.la           \
 	ssl-gnutls.la    \
-	ssl-nss.la
+	ssl-nss.la       \
+	ssl-openssl.la
 
-ssl_la_SOURCES        = ssl.c
-ssl_gnutls_la_SOURCES = ssl-gnutls.c
-ssl_nss_la_SOURCES    = ssl-nss.c
+ssl_la_SOURCES         = ssl.c
+ssl_gnutls_la_SOURCES  = ssl-gnutls.c
+ssl_nss_la_SOURCES     = ssl-nss.c
+ssl_openssl_la_SOURCES = ssl-openssl.c
 
-ssl_la_LIBADD        = $(GLIB_LIBS)
-ssl_gnutls_la_LIBADD = $(GLIB_LIBS) $(GNUTLS_LIBS)
-ssl_nss_la_LIBADD    = $(GLIB_LIBS) $(NSS_LIBS)
+ssl_la_LIBADD         = $(GLIB_LIBS)
+ssl_gnutls_la_LIBADD  = $(GLIB_LIBS) $(GNUTLS_LIBS)
+ssl_nss_la_LIBADD     = $(GLIB_LIBS) $(NSS_LIBS)
+ssl_openssl_la_LIBADD = $(GLIB_LIBS) $(OPENSSL_LIBS)
 
 endif # PLUGINS
 
@@ -35,3 +39,4 @@ ssl_nss_la_CFLAGS = $(AM_CPPFLAGS) $(NSS
 
 ssl_gnutls_la_CFLAGS = $(AM_CPPFLAGS) $(GNUTLS_CFLAGS)
 ssl_nss_la_CFLAGS = $(AM_CPPFLAGS) $(NSS_CFLAGS)
+ssl_openssl_la_CFLAGS = $(AM_CPPFLAGS) $(OPENSSL_CFLAGS)
